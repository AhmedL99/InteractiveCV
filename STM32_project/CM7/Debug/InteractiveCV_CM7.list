
InteractiveCV_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000589c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df4  08005df4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005df4  08005df4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005df4  08005df4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df8  08005df8  00015df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08005dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  24000078  08005e74  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000180  08005e74  00020180  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bf4  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d1  00000000  00000000  00032c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00035370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00036378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a6a1  00000000  00000000  00037248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a1c  00000000  00000000  000718e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00180904  00000000  00000000  00086305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00206c09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004644  00000000  00000000  00206c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005b24 	.word	0x08005b24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08005b24 	.word	0x08005b24

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b2:	4b12      	ldr	r3, [pc, #72]	; (80004fc <MX_GPIO_Init+0x50>)
 80004b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b8:	4a10      	ldr	r2, [pc, #64]	; (80004fc <MX_GPIO_Init+0x50>)
 80004ba:	f043 0302 	orr.w	r3, r3, #2
 80004be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_GPIO_Init+0x50>)
 80004c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c8:	f003 0302 	and.w	r3, r3, #2
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <MX_GPIO_Init+0x50>)
 80004d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <MX_GPIO_Init+0x50>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_GPIO_Init+0x50>)
 80004e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]

}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	58024400 	.word	0x58024400

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b090      	sub	sp, #64	; 0x40
 8000504:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000506:	4b8d      	ldr	r3, [pc, #564]	; (800073c <main+0x23c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050e:	2b00      	cmp	r3, #0
 8000510:	d11b      	bne.n	800054a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000512:	f3bf 8f4f 	dsb	sy
}
 8000516:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000518:	f3bf 8f6f 	isb	sy
}
 800051c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800051e:	4b87      	ldr	r3, [pc, #540]	; (800073c <main+0x23c>)
 8000520:	2200      	movs	r2, #0
 8000522:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000526:	f3bf 8f4f 	dsb	sy
}
 800052a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052c:	f3bf 8f6f 	isb	sy
}
 8000530:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000532:	4b82      	ldr	r3, [pc, #520]	; (800073c <main+0x23c>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a81      	ldr	r2, [pc, #516]	; (800073c <main+0x23c>)
 8000538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800053e:	f3bf 8f4f 	dsb	sy
}
 8000542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000544:	f3bf 8f6f 	isb	sy
}
 8000548:	e000      	b.n	800054c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800054a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800054c:	4b7b      	ldr	r3, [pc, #492]	; (800073c <main+0x23c>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000554:	2b00      	cmp	r3, #0
 8000556:	d138      	bne.n	80005ca <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000558:	4b78      	ldr	r3, [pc, #480]	; (800073c <main+0x23c>)
 800055a:	2200      	movs	r2, #0
 800055c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000560:	f3bf 8f4f 	dsb	sy
}
 8000564:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000566:	4b75      	ldr	r3, [pc, #468]	; (800073c <main+0x23c>)
 8000568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800056c:	633b      	str	r3, [r7, #48]	; 0x30

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000570:	0b5b      	lsrs	r3, r3, #13
 8000572:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800057a:	08db      	lsrs	r3, r3, #3
 800057c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000584:	015a      	lsls	r2, r3, #5
 8000586:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800058a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800058c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800058e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000590:	496a      	ldr	r1, [pc, #424]	; (800073c <main+0x23c>)
 8000592:	4313      	orrs	r3, r2
 8000594:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059a:	1e5a      	subs	r2, r3, #1
 800059c:	62ba      	str	r2, [r7, #40]	; 0x28
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1ef      	bne.n	8000582 <main+0x82>
    } while(sets-- != 0U);
 80005a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1e5      	bne.n	8000578 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005b2:	4b62      	ldr	r3, [pc, #392]	; (800073c <main+0x23c>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a61      	ldr	r2, [pc, #388]	; (800073c <main+0x23c>)
 80005b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005be:	f3bf 8f4f 	dsb	sy
}
 80005c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c4:	f3bf 8f6f 	isb	sy
}
 80005c8:	e000      	b.n	80005cc <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005ca:	bf00      	nop
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fb40 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f8ba 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f7ff ff6a 	bl	80004ac <MX_GPIO_Init>
  MX_TIM1_Init();
 80005d8:	f000 fa98 	bl	8000b0c <MX_TIM1_Init>
  MX_SPI3_Init();
 80005dc:	f000 f938 	bl	8000850 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 80005e0:	f004 fb0a 	bl	8004bf8 <ILI9341_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
			ILI9341_Fill_Screen(WHITE);
 80005e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005e8:	f004 fcb0 	bl	8004f4c <ILI9341_Fill_Screen>
			ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f004 faa5 	bl	8004b3c <ILI9341_Set_Rotation>
			ILI9341_Draw_Text("Counting multiple segments at once", 10, 10, BLACK, 1, WHITE);
 80005f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2301      	movs	r3, #1
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	220a      	movs	r2, #10
 8000600:	210a      	movs	r1, #10
 8000602:	484f      	ldr	r0, [pc, #316]	; (8000740 <main+0x240>)
 8000604:	f004 f99e 	bl	8004944 <ILI9341_Draw_Text>
			HAL_Delay(2000);
 8000608:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800060c:	f000 fbb2 	bl	8000d74 <HAL_Delay>
			ILI9341_Fill_Screen(WHITE);
 8000610:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000614:	f004 fc9a 	bl	8004f4c <ILI9341_Fill_Screen>

			static uint16_t x = 0;
			static uint16_t y = 0;

			char Temp_Buffer_text[40];
			for(uint16_t i = 0; i <= 10; i++)
 8000618:	2300      	movs	r3, #0
 800061a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800061c:	e084      	b.n	8000728 <main+0x228>
			{
			sprintf(Temp_Buffer_text, "Counting: %d", i);
 800061e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000620:	463b      	mov	r3, r7
 8000622:	4948      	ldr	r1, [pc, #288]	; (8000744 <main+0x244>)
 8000624:	4618      	mov	r0, r3
 8000626:	f004 fe0f 	bl	8005248 <siprintf>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 2, WHITE);
 800062a:	4638      	mov	r0, r7
 800062c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2302      	movs	r3, #2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	220a      	movs	r2, #10
 800063a:	210a      	movs	r1, #10
 800063c:	f004 f982 	bl	8004944 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 30, BLUE, 2, WHITE);
 8000640:	4638      	mov	r0, r7
 8000642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	2302      	movs	r3, #2
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	231f      	movs	r3, #31
 800064e:	221e      	movs	r2, #30
 8000650:	210a      	movs	r1, #10
 8000652:	f004 f977 	bl	8004944 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 50, RED, 2, WHITE);
 8000656:	4638      	mov	r0, r7
 8000658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2302      	movs	r3, #2
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000666:	2232      	movs	r2, #50	; 0x32
 8000668:	210a      	movs	r1, #10
 800066a:	f004 f96b 	bl	8004944 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 70, GREEN, 2, WHITE);
 800066e:	4638      	mov	r0, r7
 8000670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2302      	movs	r3, #2
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800067e:	2246      	movs	r2, #70	; 0x46
 8000680:	210a      	movs	r1, #10
 8000682:	f004 f95f 	bl	8004944 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 90, BLACK, 2, WHITE);
 8000686:	4638      	mov	r0, r7
 8000688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2302      	movs	r3, #2
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	225a      	movs	r2, #90	; 0x5a
 8000696:	210a      	movs	r1, #10
 8000698:	f004 f954 	bl	8004944 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 110, BLUE, 2, WHITE);
 800069c:	4638      	mov	r0, r7
 800069e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2302      	movs	r3, #2
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	231f      	movs	r3, #31
 80006aa:	226e      	movs	r2, #110	; 0x6e
 80006ac:	210a      	movs	r1, #10
 80006ae:	f004 f949 	bl	8004944 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 130, RED, 2, WHITE);
 80006b2:	4638      	mov	r0, r7
 80006b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2302      	movs	r3, #2
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80006c2:	2282      	movs	r2, #130	; 0x82
 80006c4:	210a      	movs	r1, #10
 80006c6:	f004 f93d 	bl	8004944 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 150, GREEN, 2, WHITE);
 80006ca:	4638      	mov	r0, r7
 80006cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2302      	movs	r3, #2
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80006da:	2296      	movs	r2, #150	; 0x96
 80006dc:	210a      	movs	r1, #10
 80006de:	f004 f931 	bl	8004944 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 170, WHITE, 2, BLACK);
 80006e2:	4638      	mov	r0, r7
 80006e4:	2300      	movs	r3, #0
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	2302      	movs	r3, #2
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f0:	22aa      	movs	r2, #170	; 0xaa
 80006f2:	210a      	movs	r1, #10
 80006f4:	f004 f926 	bl	8004944 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 190, BLUE, 2, BLACK);
 80006f8:	4638      	mov	r0, r7
 80006fa:	2300      	movs	r3, #0
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	2302      	movs	r3, #2
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	231f      	movs	r3, #31
 8000704:	22be      	movs	r2, #190	; 0xbe
 8000706:	210a      	movs	r1, #10
 8000708:	f004 f91c 	bl	8004944 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(Temp_Buffer_text, 10, 210, RED, 2, BLACK);
 800070c:	4638      	mov	r0, r7
 800070e:	2300      	movs	r3, #0
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	2302      	movs	r3, #2
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800071a:	22d2      	movs	r2, #210	; 0xd2
 800071c:	210a      	movs	r1, #10
 800071e:	f004 f911 	bl	8004944 <ILI9341_Draw_Text>
			for(uint16_t i = 0; i <= 10; i++)
 8000722:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000724:	3301      	adds	r3, #1
 8000726:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000728:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800072a:	2b0a      	cmp	r3, #10
 800072c:	f67f af77 	bls.w	800061e <main+0x11e>
			}

			HAL_Delay(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000734:	f000 fb1e 	bl	8000d74 <HAL_Delay>
  {
 8000738:	e754      	b.n	80005e4 <main+0xe4>
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	08005b3c 	.word	0x08005b3c
 8000744:	08005b60 	.word	0x08005b60

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09c      	sub	sp, #112	; 0x70
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	224c      	movs	r2, #76	; 0x4c
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fd6e 	bl	8005238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2220      	movs	r2, #32
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f004 fd68 	bl	8005238 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000768:	2004      	movs	r0, #4
 800076a:	f000 fde1 	bl	8001330 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b32      	ldr	r3, [pc, #200]	; (800083c <SystemClock_Config+0xf4>)
 8000774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000776:	4a31      	ldr	r2, [pc, #196]	; (800083c <SystemClock_Config+0xf4>)
 8000778:	f023 0301 	bic.w	r3, r3, #1
 800077c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <SystemClock_Config+0xf4>)
 8000780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <SystemClock_Config+0xf8>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000790:	4a2b      	ldr	r2, [pc, #172]	; (8000840 <SystemClock_Config+0xf8>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <SystemClock_Config+0xf8>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a4:	bf00      	nop
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <SystemClock_Config+0xf8>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b2:	d1f8      	bne.n	80007a6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	2302      	movs	r3, #2
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80007cc:	230c      	movs	r3, #12
 80007ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007dc:	230c      	movs	r3, #12
 80007de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fdf8 	bl	80013e4 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007fa:	f000 f823 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	233f      	movs	r3, #63	; 0x3f
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2102      	movs	r1, #2
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fa38 	bl	8001c98 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800082e:	f000 f809 	bl	8000844 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3770      	adds	r7, #112	; 0x70
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	58000400 	.word	0x58000400
 8000840:	58024800 	.word	0x58024800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MX_SPI3_Init+0xa4>)
 8000856:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <MX_SPI3_Init+0xa8>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_SPI3_Init+0xa4>)
 800085c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000860:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <MX_SPI3_Init+0xa4>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_SPI3_Init+0xa4>)
 800086a:	2207      	movs	r2, #7
 800086c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_SPI3_Init+0xa4>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_SPI3_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_SPI3_Init+0xa4>)
 800087c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000880:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_SPI3_Init+0xa4>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_SPI3_Init+0xa4>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_SPI3_Init+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_SPI3_Init+0xa4>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_SPI3_Init+0xa4>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_SPI3_Init+0xa4>)
 80008e0:	f003 f878 	bl	80039d4 <HAL_SPI_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80008ea:	f7ff ffab 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	24000094 	.word	0x24000094
 80008f8:	40003c00 	.word	0x40003c00

080008fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0bc      	sub	sp, #240	; 0xf0
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	22c0      	movs	r2, #192	; 0xc0
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f004 fc8b 	bl	8005238 <memset>
  if(spiHandle->Instance==SPI3)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <HAL_SPI_MspInit+0x10c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d169      	bne.n	8000a00 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800092c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000930:	f04f 0300 	mov.w	r3, #0
 8000934:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000938:	2300      	movs	r3, #0
 800093a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fcd9 	bl	80022f8 <HAL_RCCEx_PeriphCLKConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800094c:	f7ff ff7a 	bl	8000844 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000950:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <HAL_SPI_MspInit+0x110>)
 8000952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000956:	4a2d      	ldr	r2, [pc, #180]	; (8000a0c <HAL_SPI_MspInit+0x110>)
 8000958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800095c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <HAL_SPI_MspInit+0x110>)
 8000962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <HAL_SPI_MspInit+0x110>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	4a25      	ldr	r2, [pc, #148]	; (8000a0c <HAL_SPI_MspInit+0x110>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <HAL_SPI_MspInit+0x110>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <HAL_SPI_MspInit+0x110>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <HAL_SPI_MspInit+0x110>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_SPI_MspInit+0x110>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009aa:	2304      	movs	r3, #4
 80009ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80009c2:	2307      	movs	r3, #7
 80009c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009cc:	4619      	mov	r1, r3
 80009ce:	4810      	ldr	r0, [pc, #64]	; (8000a10 <HAL_SPI_MspInit+0x114>)
 80009d0:	f000 fae4 	bl	8000f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ee:	2306      	movs	r3, #6
 80009f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 80009fc:	f000 face 	bl	8000f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a00:	bf00      	nop
 8000a02:	37f0      	adds	r7, #240	; 0xf0
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40003c00 	.word	0x40003c00
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	58020400 	.word	0x58020400
 8000a14:	58020800 	.word	0x58020800

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_MspInit+0x30>)
 8000a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a24:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x30>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x30>)
 8000a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	58024400 	.word	0x58024400

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 f94c 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	; (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad0:	f004 fb88 	bl	80051e4 <__errno>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <_sbrk+0x64>)
 8000af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	24080000 	.word	0x24080000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	2400011c 	.word	0x2400011c
 8000b08:	24000180 	.word	0x24000180

08000b0c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <MX_TIM1_Init+0xa8>)
 8000b2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b32:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b5a:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b5c:	f003 fb43 	bl	80041e6 <HAL_TIM_Base_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000b66:	f7ff fe6d 	bl	8000844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	480e      	ldr	r0, [pc, #56]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b78:	f003 fb8c 	bl	8004294 <HAL_TIM_ConfigClockSource>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b82:	f7ff fe5f 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b98:	f003 fdac 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000ba2:	f7ff fe4f 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	24000120 	.word	0x24000120
 8000bb4:	40010000 	.word	0x40010000

08000bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <HAL_TIM_Base_MspInit+0x3c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d10e      	bne.n	8000be8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_TIM_Base_MspInit+0x40>)
 8000bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bd0:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <HAL_TIM_Base_MspInit+0x40>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_TIM_Base_MspInit+0x40>)
 8000bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	40010000 	.word	0x40010000
 8000bf8:	58024400 	.word	0x58024400

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c00:	f7ff fbbe 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f004 fae1 	bl	80051f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fc67 	bl	8000500 <main>
  bx  lr
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c3c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000c40:	08005dfc 	.word	0x08005dfc
  ldr r2, =_sbss
 8000c44:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000c48:	24000180 	.word	0x24000180

08000c4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC3_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 f96e 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c5c:	f001 f9d2 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8000c60:	4602      	mov	r2, r0
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_Init+0x68>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	4913      	ldr	r1, [pc, #76]	; (8000cbc <HAL_Init+0x6c>)
 8000c6e:	5ccb      	ldrb	r3, [r1, r3]
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	fa22 f303 	lsr.w	r3, r2, r3
 8000c78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_Init+0x68>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_Init+0x6c>)
 8000c84:	5cd3      	ldrb	r3, [r2, r3]
 8000c86:	f003 031f 	and.w	r3, r3, #31
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c90:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <HAL_Init+0x70>)
 8000c92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <HAL_Init+0x74>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f814 	bl	8000cc8 <HAL_InitTick>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e002      	b.n	8000cb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000caa:	f7ff feb5 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	58024400 	.word	0x58024400
 8000cbc:	08005b70 	.word	0x08005b70
 8000cc0:	24000004 	.word	0x24000004
 8000cc4:	24000000 	.word	0x24000000

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_InitTick+0x60>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d101      	bne.n	8000cdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e021      	b.n	8000d20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_InitTick+0x64>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_InitTick+0x60>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f945 	bl	8000f82 <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f000 f91d 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_InitTick+0x68>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2400000c 	.word	0x2400000c
 8000d2c:	24000000 	.word	0x24000000
 8000d30:	24000008 	.word	0x24000008

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2400000c 	.word	0x2400000c
 8000d58:	2400016c 	.word	0x2400016c

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2400016c 	.word	0x2400016c

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffde 	bl	8000d5c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2400000c 	.word	0x2400000c

08000dbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetREVID+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	0c1b      	lsrs	r3, r3, #16
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	5c001000 	.word	0x5c001000

08000dd4 <__NVIC_SetPriorityGrouping>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <__NVIC_SetPriorityGrouping+0x40>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x40>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	05fa0000 	.word	0x05fa0000

08000e1c <__NVIC_GetPriorityGrouping>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_SetPriority>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff8e 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff47 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff5e 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff90 	bl	8000e8c <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5f 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffb2 	bl	8000ef4 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000faa:	4b89      	ldr	r3, [pc, #548]	; (80011d0 <HAL_GPIO_Init+0x234>)
 8000fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fae:	e194      	b.n	80012da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 8186 	beq.w	80012d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d005      	beq.n	8000fe0 <HAL_GPIO_Init+0x44>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d130      	bne.n	8001042 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001016:	2201      	movs	r2, #1
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	f003 0201 	and.w	r2, r3, #1
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b03      	cmp	r3, #3
 800104c:	d017      	beq.n	800107e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d123      	bne.n	80010d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	69b9      	ldr	r1, [r7, #24]
 80010ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0203 	and.w	r2, r3, #3
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80e0 	beq.w	80012d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001114:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <HAL_GPIO_Init+0x238>)
 8001116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800111a:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <HAL_GPIO_Init+0x238>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <HAL_GPIO_Init+0x238>)
 8001126:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001132:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <HAL_GPIO_Init+0x23c>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a20      	ldr	r2, [pc, #128]	; (80011dc <HAL_GPIO_Init+0x240>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d052      	beq.n	8001204 <HAL_GPIO_Init+0x268>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <HAL_GPIO_Init+0x244>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d031      	beq.n	80011ca <HAL_GPIO_Init+0x22e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_GPIO_Init+0x248>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d02b      	beq.n	80011c6 <HAL_GPIO_Init+0x22a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_GPIO_Init+0x24c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d025      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <HAL_GPIO_Init+0x250>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01f      	beq.n	80011be <HAL_GPIO_Init+0x222>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <HAL_GPIO_Init+0x254>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d019      	beq.n	80011ba <HAL_GPIO_Init+0x21e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <HAL_GPIO_Init+0x258>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0x21a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_GPIO_Init+0x25c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00d      	beq.n	80011b2 <HAL_GPIO_Init+0x216>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a18      	ldr	r2, [pc, #96]	; (80011fc <HAL_GPIO_Init+0x260>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0x212>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a17      	ldr	r2, [pc, #92]	; (8001200 <HAL_GPIO_Init+0x264>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_GPIO_Init+0x20e>
 80011a6:	2309      	movs	r3, #9
 80011a8:	e02d      	b.n	8001206 <HAL_GPIO_Init+0x26a>
 80011aa:	230a      	movs	r3, #10
 80011ac:	e02b      	b.n	8001206 <HAL_GPIO_Init+0x26a>
 80011ae:	2308      	movs	r3, #8
 80011b0:	e029      	b.n	8001206 <HAL_GPIO_Init+0x26a>
 80011b2:	2307      	movs	r3, #7
 80011b4:	e027      	b.n	8001206 <HAL_GPIO_Init+0x26a>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e025      	b.n	8001206 <HAL_GPIO_Init+0x26a>
 80011ba:	2305      	movs	r3, #5
 80011bc:	e023      	b.n	8001206 <HAL_GPIO_Init+0x26a>
 80011be:	2304      	movs	r3, #4
 80011c0:	e021      	b.n	8001206 <HAL_GPIO_Init+0x26a>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e01f      	b.n	8001206 <HAL_GPIO_Init+0x26a>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e01d      	b.n	8001206 <HAL_GPIO_Init+0x26a>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e01b      	b.n	8001206 <HAL_GPIO_Init+0x26a>
 80011ce:	bf00      	nop
 80011d0:	58000080 	.word	0x58000080
 80011d4:	58024400 	.word	0x58024400
 80011d8:	58000400 	.word	0x58000400
 80011dc:	58020000 	.word	0x58020000
 80011e0:	58020400 	.word	0x58020400
 80011e4:	58020800 	.word	0x58020800
 80011e8:	58020c00 	.word	0x58020c00
 80011ec:	58021000 	.word	0x58021000
 80011f0:	58021400 	.word	0x58021400
 80011f4:	58021800 	.word	0x58021800
 80011f8:	58021c00 	.word	0x58021c00
 80011fc:	58022000 	.word	0x58022000
 8001200:	58022400 	.word	0x58022400
 8001204:	2300      	movs	r3, #0
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	f002 0203 	and.w	r2, r2, #3
 800120c:	0092      	lsls	r2, r2, #2
 800120e:	4093      	lsls	r3, r2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001216:	4938      	ldr	r1, [pc, #224]	; (80012f8 <HAL_GPIO_Init+0x35c>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800124a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	3301      	adds	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f ae63 	bne.w	8000fb0 <HAL_GPIO_Init+0x14>
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	3724      	adds	r7, #36	; 0x24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	58000400 	.word	0x58000400

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	2b06      	cmp	r3, #6
 8001342:	d00a      	beq.n	800135a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	d001      	beq.n	8001356 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e040      	b.n	80013d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e03e      	b.n	80013d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001362:	491f      	ldr	r1, [pc, #124]	; (80013e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4313      	orrs	r3, r2
 8001368:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800136a:	f7ff fcf7 	bl	8000d5c <HAL_GetTick>
 800136e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001370:	e009      	b.n	8001386 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001372:	f7ff fcf3 	bl	8000d5c <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001380:	d901      	bls.n	8001386 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e028      	b.n	80013d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001392:	d1ee      	bne.n	8001372 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b1e      	cmp	r3, #30
 8001398:	d008      	beq.n	80013ac <HAL_PWREx_ConfigSupply+0x7c>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b2e      	cmp	r3, #46	; 0x2e
 800139e:	d005      	beq.n	80013ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b1d      	cmp	r3, #29
 80013a4:	d002      	beq.n	80013ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b2d      	cmp	r3, #45	; 0x2d
 80013aa:	d114      	bne.n	80013d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013ac:	f7ff fcd6 	bl	8000d5c <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013b2:	e009      	b.n	80013c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013b4:	f7ff fcd2 	bl	8000d5c <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c2:	d901      	bls.n	80013c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e007      	b.n	80013d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d4:	d1ee      	bne.n	80013b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	58024800 	.word	0x58024800

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f000 bc48 	b.w	8001c88 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 8088 	beq.w	8001516 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001406:	4b99      	ldr	r3, [pc, #612]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001410:	4b96      	ldr	r3, [pc, #600]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	2b10      	cmp	r3, #16
 800141a:	d007      	beq.n	800142c <HAL_RCC_OscConfig+0x48>
 800141c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141e:	2b18      	cmp	r3, #24
 8001420:	d111      	bne.n	8001446 <HAL_RCC_OscConfig+0x62>
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d10c      	bne.n	8001446 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	4b8f      	ldr	r3, [pc, #572]	; (800166c <HAL_RCC_OscConfig+0x288>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d06d      	beq.n	8001514 <HAL_RCC_OscConfig+0x130>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d169      	bne.n	8001514 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	f000 bc21 	b.w	8001c88 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x7a>
 8001450:	4b86      	ldr	r3, [pc, #536]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a85      	ldr	r2, [pc, #532]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e02e      	b.n	80014bc <HAL_RCC_OscConfig+0xd8>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x9c>
 8001466:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a80      	ldr	r2, [pc, #512]	; (800166c <HAL_RCC_OscConfig+0x288>)
 800146c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b7e      	ldr	r3, [pc, #504]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7d      	ldr	r2, [pc, #500]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e01d      	b.n	80014bc <HAL_RCC_OscConfig+0xd8>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0xc0>
 800148a:	4b78      	ldr	r3, [pc, #480]	; (800166c <HAL_RCC_OscConfig+0x288>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a77      	ldr	r2, [pc, #476]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b75      	ldr	r3, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a74      	ldr	r2, [pc, #464]	; (800166c <HAL_RCC_OscConfig+0x288>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0xd8>
 80014a4:	4b71      	ldr	r3, [pc, #452]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a70      	ldr	r2, [pc, #448]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b6e      	ldr	r3, [pc, #440]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a6d      	ldr	r2, [pc, #436]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc4a 	bl	8000d5c <HAL_GetTick>
 80014c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fc46 	bl	8000d5c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e3d4      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014de:	4b63      	ldr	r3, [pc, #396]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0xe8>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc36 	bl	8000d5c <HAL_GetTick>
 80014f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fc32 	bl	8000d5c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e3c0      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001506:	4b59      	ldr	r3, [pc, #356]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x110>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 80ca 	beq.w	80016b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001524:	4b51      	ldr	r3, [pc, #324]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800152c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d007      	beq.n	800154a <HAL_RCC_OscConfig+0x166>
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	2b18      	cmp	r3, #24
 800153e:	d156      	bne.n	80015ee <HAL_RCC_OscConfig+0x20a>
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d151      	bne.n	80015ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154a:	4b48      	ldr	r3, [pc, #288]	; (800166c <HAL_RCC_OscConfig+0x288>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <HAL_RCC_OscConfig+0x17e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e392      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 0219 	bic.w	r2, r3, #25
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	493f      	ldr	r1, [pc, #252]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fbf2 	bl	8000d5c <HAL_GetTick>
 8001578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff fbee 	bl	8000d5c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e37c      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	f7ff fc0f 	bl	8000dbc <HAL_GetREVID>
 800159e:	4603      	mov	r3, r0
 80015a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d817      	bhi.n	80015d8 <HAL_RCC_OscConfig+0x1f4>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b40      	cmp	r3, #64	; 0x40
 80015ae:	d108      	bne.n	80015c2 <HAL_RCC_OscConfig+0x1de>
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80015b8:	4a2c      	ldr	r2, [pc, #176]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80015ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c0:	e07a      	b.n	80016b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	031b      	lsls	r3, r3, #12
 80015d0:	4926      	ldr	r1, [pc, #152]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d6:	e06f      	b.n	80016b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	4921      	ldr	r1, [pc, #132]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ec:	e064      	b.n	80016b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d047      	beq.n	8001686 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_RCC_OscConfig+0x288>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 0219 	bic.w	r2, r3, #25
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	491a      	ldr	r1, [pc, #104]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fba8 	bl	8000d5c <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff fba4 	bl	8000d5c <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e332      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	f7ff fbc5 	bl	8000dbc <HAL_GetREVID>
 8001632:	4603      	mov	r3, r0
 8001634:	f241 0203 	movw	r2, #4099	; 0x1003
 8001638:	4293      	cmp	r3, r2
 800163a:	d819      	bhi.n	8001670 <HAL_RCC_OscConfig+0x28c>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	2b40      	cmp	r3, #64	; 0x40
 8001642:	d108      	bne.n	8001656 <HAL_RCC_OscConfig+0x272>
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_RCC_OscConfig+0x288>)
 800164e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001652:	6053      	str	r3, [r2, #4]
 8001654:	e030      	b.n	80016b8 <HAL_RCC_OscConfig+0x2d4>
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	031b      	lsls	r3, r3, #12
 8001664:	4901      	ldr	r1, [pc, #4]	; (800166c <HAL_RCC_OscConfig+0x288>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
 800166a:	e025      	b.n	80016b8 <HAL_RCC_OscConfig+0x2d4>
 800166c:	58024400 	.word	0x58024400
 8001670:	4b9a      	ldr	r3, [pc, #616]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	4997      	ldr	r1, [pc, #604]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e018      	b.n	80016b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b95      	ldr	r3, [pc, #596]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a94      	ldr	r2, [pc, #592]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff fb63 	bl	8000d5c <HAL_GetTick>
 8001696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff fb5f 	bl	8000d5c <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e2ed      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016ac:	4b8b      	ldr	r3, [pc, #556]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a9 	beq.w	8001818 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c6:	4b85      	ldr	r3, [pc, #532]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016d0:	4b82      	ldr	r3, [pc, #520]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d007      	beq.n	80016ec <HAL_RCC_OscConfig+0x308>
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b18      	cmp	r3, #24
 80016e0:	d13a      	bne.n	8001758 <HAL_RCC_OscConfig+0x374>
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d135      	bne.n	8001758 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ec:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_OscConfig+0x320>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b80      	cmp	r3, #128	; 0x80
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e2c1      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001704:	f7ff fb5a 	bl	8000dbc <HAL_GetREVID>
 8001708:	4603      	mov	r3, r0
 800170a:	f241 0203 	movw	r2, #4099	; 0x1003
 800170e:	4293      	cmp	r3, r2
 8001710:	d817      	bhi.n	8001742 <HAL_RCC_OscConfig+0x35e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	2b20      	cmp	r3, #32
 8001718:	d108      	bne.n	800172c <HAL_RCC_OscConfig+0x348>
 800171a:	4b70      	ldr	r3, [pc, #448]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001722:	4a6e      	ldr	r2, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001728:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800172a:	e075      	b.n	8001818 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800172c:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	069b      	lsls	r3, r3, #26
 800173a:	4968      	ldr	r1, [pc, #416]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001740:	e06a      	b.n	8001818 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001742:	4b66      	ldr	r3, [pc, #408]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	061b      	lsls	r3, r3, #24
 8001750:	4962      	ldr	r1, [pc, #392]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001752:	4313      	orrs	r3, r2
 8001754:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001756:	e05f      	b.n	8001818 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d042      	beq.n	80017e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001760:	4b5e      	ldr	r3, [pc, #376]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a5d      	ldr	r2, [pc, #372]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff faf6 	bl	8000d5c <HAL_GetTick>
 8001770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001774:	f7ff faf2 	bl	8000d5c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e280      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001786:	4b55      	ldr	r3, [pc, #340]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001792:	f7ff fb13 	bl	8000dbc <HAL_GetREVID>
 8001796:	4603      	mov	r3, r0
 8001798:	f241 0203 	movw	r2, #4099	; 0x1003
 800179c:	4293      	cmp	r3, r2
 800179e:	d817      	bhi.n	80017d0 <HAL_RCC_OscConfig+0x3ec>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	d108      	bne.n	80017ba <HAL_RCC_OscConfig+0x3d6>
 80017a8:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80017b0:	4a4a      	ldr	r2, [pc, #296]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80017b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017b6:	6053      	str	r3, [r2, #4]
 80017b8:	e02e      	b.n	8001818 <HAL_RCC_OscConfig+0x434>
 80017ba:	4b48      	ldr	r3, [pc, #288]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	069b      	lsls	r3, r3, #26
 80017c8:	4944      	ldr	r1, [pc, #272]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
 80017ce:	e023      	b.n	8001818 <HAL_RCC_OscConfig+0x434>
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	493f      	ldr	r1, [pc, #252]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60cb      	str	r3, [r1, #12]
 80017e4:	e018      	b.n	8001818 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a3c      	ldr	r2, [pc, #240]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80017ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff fab3 	bl	8000d5c <HAL_GetTick>
 80017f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017fa:	f7ff faaf 	bl	8000d5c <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e23d      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f0      	bne.n	80017fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d036      	beq.n	8001892 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d019      	beq.n	8001860 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182c:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 800182e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001830:	4a2a      	ldr	r2, [pc, #168]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff fa90 	bl	8000d5c <HAL_GetTick>
 800183c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff fa8c 	bl	8000d5c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e21a      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x45c>
 800185e:	e018      	b.n	8001892 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001864:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fa76 	bl	8000d5c <HAL_GetTick>
 8001870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff fa72 	bl	8000d5c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e200      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 8001888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b00      	cmp	r3, #0
 800189c:	d039      	beq.n	8001912 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80018ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fa53 	bl	8000d5c <HAL_GetTick>
 80018b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ba:	f7ff fa4f 	bl	8000d5c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e1dd      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_RCC_OscConfig+0x4f8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x4d6>
 80018d8:	e01b      	b.n	8001912 <HAL_RCC_OscConfig+0x52e>
 80018da:	bf00      	nop
 80018dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018e0:	4b9b      	ldr	r3, [pc, #620]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a9a      	ldr	r2, [pc, #616]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 80018e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018ec:	f7ff fa36 	bl	8000d5c <HAL_GetTick>
 80018f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f4:	f7ff fa32 	bl	8000d5c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1c0      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001906:	4b92      	ldr	r3, [pc, #584]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8081 	beq.w	8001a22 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001920:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <HAL_RCC_OscConfig+0x770>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a8b      	ldr	r2, [pc, #556]	; (8001b54 <HAL_RCC_OscConfig+0x770>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800192c:	f7ff fa16 	bl	8000d5c <HAL_GetTick>
 8001930:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001934:	f7ff fa12 	bl	8000d5c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1a0      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001946:	4b83      	ldr	r3, [pc, #524]	; (8001b54 <HAL_RCC_OscConfig+0x770>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d106      	bne.n	8001968 <HAL_RCC_OscConfig+0x584>
 800195a:	4b7d      	ldr	r3, [pc, #500]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a7c      	ldr	r2, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
 8001966:	e02d      	b.n	80019c4 <HAL_RCC_OscConfig+0x5e0>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10c      	bne.n	800198a <HAL_RCC_OscConfig+0x5a6>
 8001970:	4b77      	ldr	r3, [pc, #476]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a76      	ldr	r2, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	4b74      	ldr	r3, [pc, #464]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a73      	ldr	r2, [pc, #460]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001982:	f023 0304 	bic.w	r3, r3, #4
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	e01c      	b.n	80019c4 <HAL_RCC_OscConfig+0x5e0>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c8>
 8001992:	4b6f      	ldr	r3, [pc, #444]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	4a6e      	ldr	r2, [pc, #440]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6713      	str	r3, [r2, #112]	; 0x70
 800199e:	4b6c      	ldr	r3, [pc, #432]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a6b      	ldr	r2, [pc, #428]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0x5e0>
 80019ac:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	4a67      	ldr	r2, [pc, #412]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	6713      	str	r3, [r2, #112]	; 0x70
 80019b8:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a64      	ldr	r2, [pc, #400]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 80019be:	f023 0304 	bic.w	r3, r3, #4
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d015      	beq.n	80019f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f9c6 	bl	8000d5c <HAL_GetTick>
 80019d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f7ff f9c2 	bl	8000d5c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e14e      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019ea:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0ee      	beq.n	80019d4 <HAL_RCC_OscConfig+0x5f0>
 80019f6:	e014      	b.n	8001a22 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff f9b0 	bl	8000d5c <HAL_GetTick>
 80019fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff f9ac 	bl	8000d5c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e138      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a16:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ee      	bne.n	8001a00 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 812d 	beq.w	8001c86 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a2c:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a34:	2b18      	cmp	r3, #24
 8001a36:	f000 80bd 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	f040 809e 	bne.w	8001b80 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	4b42      	ldr	r3, [pc, #264]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a41      	ldr	r2, [pc, #260]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f984 	bl	8000d5c <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f980 	bl	8000d5c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e10e      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a6a:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a76:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <HAL_RCC_OscConfig+0x774>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	4931      	ldr	r1, [pc, #196]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	628b      	str	r3, [r1, #40]	; 0x28
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	3b01      	subs	r3, #1
 8001a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	061b      	lsls	r3, r3, #24
 8001abc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ac0:	4923      	ldr	r1, [pc, #140]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_RCC_OscConfig+0x778>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ade:	00d2      	lsls	r2, r2, #3
 8001ae0:	491b      	ldr	r1, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f023 020c 	bic.w	r2, r3, #12
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4917      	ldr	r1, [pc, #92]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	f023 0202 	bic.w	r2, r3, #2
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	4912      	ldr	r1, [pc, #72]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_RCC_OscConfig+0x76c>)
 8001b40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b46:	f7ff f909 	bl	8000d5c <HAL_GetTick>
 8001b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b4c:	e011      	b.n	8001b72 <HAL_RCC_OscConfig+0x78e>
 8001b4e:	bf00      	nop
 8001b50:	58024400 	.word	0x58024400
 8001b54:	58024800 	.word	0x58024800
 8001b58:	fffffc0c 	.word	0xfffffc0c
 8001b5c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f8fc 	bl	8000d5c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e08a      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b72:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x77c>
 8001b7e:	e082      	b.n	8001c86 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a42      	ldr	r2, [pc, #264]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f8e6 	bl	8000d5c <HAL_GetTick>
 8001b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff f8e2 	bl	8000d5c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e070      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ba6:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x7b0>
 8001bb2:	e068      	b.n	8001c86 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d031      	beq.n	8001c2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f003 0203 	and.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d12a      	bne.n	8001c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d122      	bne.n	8001c2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d11a      	bne.n	8001c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	0a5b      	lsrs	r3, r3, #9
 8001bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d111      	bne.n	8001c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	0c1b      	lsrs	r3, r3, #16
 8001c0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d108      	bne.n	8001c2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	0e1b      	lsrs	r3, r3, #24
 8001c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e02b      	b.n	8001c88 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d01f      	beq.n	8001c86 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c52:	f7ff f883 	bl	8000d5c <HAL_GetTick>
 8001c56:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c58:	bf00      	nop
 8001c5a:	f7ff f87f 	bl	8000d5c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d0f9      	beq.n	8001c5a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_OscConfig+0x8b0>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c72:	00d2      	lsls	r2, r2, #3
 8001c74:	4906      	ldr	r1, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_RCC_OscConfig+0x8ac>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3730      	adds	r7, #48	; 0x30
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	58024400 	.word	0x58024400
 8001c94:	ffff0007 	.word	0xffff0007

08001c98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e19c      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cac:	4b8a      	ldr	r3, [pc, #552]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d910      	bls.n	8001cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b87      	ldr	r3, [pc, #540]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 020f 	bic.w	r2, r3, #15
 8001cc2:	4985      	ldr	r1, [pc, #532]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b83      	ldr	r3, [pc, #524]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e184      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d010      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	4b7b      	ldr	r3, [pc, #492]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d908      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cf8:	4b78      	ldr	r3, [pc, #480]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	4975      	ldr	r1, [pc, #468]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	4b70      	ldr	r3, [pc, #448]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d908      	bls.n	8001d38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d26:	4b6d      	ldr	r3, [pc, #436]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	496a      	ldr	r1, [pc, #424]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d010      	beq.n	8001d66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	4b64      	ldr	r3, [pc, #400]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d908      	bls.n	8001d66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d54:	4b61      	ldr	r3, [pc, #388]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	495e      	ldr	r1, [pc, #376]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d010      	beq.n	8001d94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d908      	bls.n	8001d94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d82:	4b56      	ldr	r3, [pc, #344]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4953      	ldr	r1, [pc, #332]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d010      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4b4d      	ldr	r3, [pc, #308]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d908      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b4a      	ldr	r3, [pc, #296]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f023 020f 	bic.w	r2, r3, #15
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4947      	ldr	r1, [pc, #284]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d055      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001dce:	4b43      	ldr	r3, [pc, #268]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4940      	ldr	r1, [pc, #256]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001de8:	4b3c      	ldr	r3, [pc, #240]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d121      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0f6      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e00:	4b36      	ldr	r3, [pc, #216]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d115      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0ea      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e18:	4b30      	ldr	r3, [pc, #192]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0de      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e28:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0d6      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f023 0207 	bic.w	r2, r3, #7
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4925      	ldr	r1, [pc, #148]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e4a:	f7fe ff87 	bl	8000d5c <HAL_GetTick>
 8001e4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e52:	f7fe ff83 	bl	8000d5c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0be      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d1eb      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d010      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d208      	bcs.n	8001ea8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f023 020f 	bic.w	r2, r3, #15
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	490e      	ldr	r1, [pc, #56]	; (8001edc <HAL_RCC_ClockConfig+0x244>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d214      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 020f 	bic.w	r2, r3, #15
 8001ebe:	4906      	ldr	r1, [pc, #24]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <HAL_RCC_ClockConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e086      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x34e>
 8001ed8:	52002000 	.word	0x52002000
 8001edc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d010      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d208      	bcs.n	8001f0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001efc:	4b3c      	ldr	r3, [pc, #240]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	4939      	ldr	r1, [pc, #228]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d208      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	492e      	ldr	r1, [pc, #184]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d010      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699a      	ldr	r2, [r3, #24]
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d208      	bcs.n	8001f6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4922      	ldr	r1, [pc, #136]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d010      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d208      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4917      	ldr	r1, [pc, #92]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f98:	f000 f834 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	4912      	ldr	r1, [pc, #72]	; (8001ff4 <HAL_RCC_ClockConfig+0x35c>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_RCC_ClockConfig+0x358>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <HAL_RCC_ClockConfig+0x35c>)
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_RCC_ClockConfig+0x360>)
 8001fce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_RCC_ClockConfig+0x364>)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x368>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fe74 	bl	8000cc8 <HAL_InitTick>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	58024400 	.word	0x58024400
 8001ff4:	08005b70 	.word	0x08005b70
 8001ff8:	24000004 	.word	0x24000004
 8001ffc:	24000000 	.word	0x24000000
 8002000:	24000008 	.word	0x24000008

08002004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800200a:	4bb3      	ldr	r3, [pc, #716]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002012:	2b18      	cmp	r3, #24
 8002014:	f200 8155 	bhi.w	80022c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <HAL_RCC_GetSysClockFreq+0x1c>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002085 	.word	0x08002085
 8002024:	080022c3 	.word	0x080022c3
 8002028:	080022c3 	.word	0x080022c3
 800202c:	080022c3 	.word	0x080022c3
 8002030:	080022c3 	.word	0x080022c3
 8002034:	080022c3 	.word	0x080022c3
 8002038:	080022c3 	.word	0x080022c3
 800203c:	080022c3 	.word	0x080022c3
 8002040:	080020ab 	.word	0x080020ab
 8002044:	080022c3 	.word	0x080022c3
 8002048:	080022c3 	.word	0x080022c3
 800204c:	080022c3 	.word	0x080022c3
 8002050:	080022c3 	.word	0x080022c3
 8002054:	080022c3 	.word	0x080022c3
 8002058:	080022c3 	.word	0x080022c3
 800205c:	080022c3 	.word	0x080022c3
 8002060:	080020b1 	.word	0x080020b1
 8002064:	080022c3 	.word	0x080022c3
 8002068:	080022c3 	.word	0x080022c3
 800206c:	080022c3 	.word	0x080022c3
 8002070:	080022c3 	.word	0x080022c3
 8002074:	080022c3 	.word	0x080022c3
 8002078:	080022c3 	.word	0x080022c3
 800207c:	080022c3 	.word	0x080022c3
 8002080:	080020b7 	.word	0x080020b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002084:	4b94      	ldr	r3, [pc, #592]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d009      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002090:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	08db      	lsrs	r3, r3, #3
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	4a90      	ldr	r2, [pc, #576]	; (80022dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80020a2:	e111      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020a4:	4b8d      	ldr	r3, [pc, #564]	; (80022dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020a6:	61bb      	str	r3, [r7, #24]
      break;
 80020a8:	e10e      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80020aa:	4b8d      	ldr	r3, [pc, #564]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020ac:	61bb      	str	r3, [r7, #24]
      break;
 80020ae:	e10b      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80020b0:	4b8c      	ldr	r3, [pc, #560]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020b2:	61bb      	str	r3, [r7, #24]
      break;
 80020b4:	e108      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80020c0:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020cc:	4b82      	ldr	r3, [pc, #520]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80020d6:	4b80      	ldr	r3, [pc, #512]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	08db      	lsrs	r3, r3, #3
 80020dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80e1 	beq.w	80022bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	f000 8083 	beq.w	8002208 <HAL_RCC_GetSysClockFreq+0x204>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b02      	cmp	r3, #2
 8002106:	f200 80a1 	bhi.w	800224c <HAL_RCC_GetSysClockFreq+0x248>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x114>
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d056      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002116:	e099      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d02d      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002124:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	4a6b      	ldr	r2, [pc, #428]	; (80022dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800214e:	4b62      	ldr	r3, [pc, #392]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800215e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002162:	eddf 5a61 	vldr	s11, [pc, #388]	; 80022e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800216a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800216e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800217e:	e087      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800218a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800218e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002192:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80022e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021c2:	e065      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021d6:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80022e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002206:	e043      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002212:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800221a:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800222a:	ed97 6a02 	vldr	s12, [r7, #8]
 800222e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80022e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800223a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800223e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800224a:	e021      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002256:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800225a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002266:	ee07 3a90 	vmov	s15, r3
 800226a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002272:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80022e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800227a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800227e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800228e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	0a5b      	lsrs	r3, r3, #9
 8002296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800229a:	3301      	adds	r3, #1
 800229c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80022ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b4:	ee17 3a90 	vmov	r3, s15
 80022b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80022ba:	e005      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
      break;
 80022c0:	e002      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022c4:	61bb      	str	r3, [r7, #24]
      break;
 80022c6:	bf00      	nop
  }

  return sysclockfreq;
 80022c8:	69bb      	ldr	r3, [r7, #24]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	58024400 	.word	0x58024400
 80022dc:	03d09000 	.word	0x03d09000
 80022e0:	003d0900 	.word	0x003d0900
 80022e4:	007a1200 	.word	0x007a1200
 80022e8:	46000000 	.word	0x46000000
 80022ec:	4c742400 	.word	0x4c742400
 80022f0:	4a742400 	.word	0x4a742400
 80022f4:	4af42400 	.word	0x4af42400

080022f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022fc:	b0ca      	sub	sp, #296	; 0x128
 80022fe:	af00      	add	r7, sp, #0
 8002300:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002304:	2300      	movs	r3, #0
 8002306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800230a:	2300      	movs	r3, #0
 800230c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800231c:	2500      	movs	r5, #0
 800231e:	ea54 0305 	orrs.w	r3, r4, r5
 8002322:	d049      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800232a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800232e:	d02f      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002334:	d828      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800233a:	d01a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800233c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002340:	d822      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800234a:	d007      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800234c:	e01c      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800234e:	4bb8      	ldr	r3, [pc, #736]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	4ab7      	ldr	r2, [pc, #732]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800235a:	e01a      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800235c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002360:	3308      	adds	r3, #8
 8002362:	2102      	movs	r1, #2
 8002364:	4618      	mov	r0, r3
 8002366:	f001 f9d1 	bl	800370c <RCCEx_PLL2_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002370:	e00f      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002376:	3328      	adds	r3, #40	; 0x28
 8002378:	2102      	movs	r1, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f001 fa78 	bl	8003870 <RCCEx_PLL3_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002386:	e004      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800238e:	e000      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800239a:	4ba5      	ldr	r3, [pc, #660]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800239c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80023a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023a8:	4aa1      	ldr	r2, [pc, #644]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023aa:	430b      	orrs	r3, r1
 80023ac:	6513      	str	r3, [r2, #80]	; 0x50
 80023ae:	e003      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80023c4:	f04f 0900 	mov.w	r9, #0
 80023c8:	ea58 0309 	orrs.w	r3, r8, r9
 80023cc:	d047      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80023ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d82a      	bhi.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80023d8:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80023da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023de:	bf00      	nop
 80023e0:	080023f5 	.word	0x080023f5
 80023e4:	08002403 	.word	0x08002403
 80023e8:	08002419 	.word	0x08002419
 80023ec:	08002437 	.word	0x08002437
 80023f0:	08002437 	.word	0x08002437
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023f4:	4b8e      	ldr	r3, [pc, #568]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	4a8d      	ldr	r2, [pc, #564]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002400:	e01a      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002406:	3308      	adds	r3, #8
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f001 f97e 	bl	800370c <RCCEx_PLL2_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002416:	e00f      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800241c:	3328      	adds	r3, #40	; 0x28
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f001 fa25 	bl	8003870 <RCCEx_PLL3_Config>
 8002426:	4603      	mov	r3, r0
 8002428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800242c:	e004      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002434:	e000      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002440:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002444:	f023 0107 	bic.w	r1, r3, #7
 8002448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	4a78      	ldr	r2, [pc, #480]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002450:	430b      	orrs	r3, r1
 8002452:	6513      	str	r3, [r2, #80]	; 0x50
 8002454:	e003      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800245a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800245e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800246a:	f04f 0b00 	mov.w	fp, #0
 800246e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002472:	d04c      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247e:	d030      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002484:	d829      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002486:	2bc0      	cmp	r3, #192	; 0xc0
 8002488:	d02d      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800248a:	2bc0      	cmp	r3, #192	; 0xc0
 800248c:	d825      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800248e:	2b80      	cmp	r3, #128	; 0x80
 8002490:	d018      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002492:	2b80      	cmp	r3, #128	; 0x80
 8002494:	d821      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800249a:	2b40      	cmp	r3, #64	; 0x40
 800249c:	d007      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800249e:	e01c      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024a0:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	4a62      	ldr	r2, [pc, #392]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024ac:	e01c      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024b2:	3308      	adds	r3, #8
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 f928 	bl	800370c <RCCEx_PLL2_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024c2:	e011      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024c8:	3328      	adds	r3, #40	; 0x28
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 f9cf 	bl	8003870 <RCCEx_PLL3_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024d8:	e006      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80024e0:	e002      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80024e2:	bf00      	nop
 80024e4:	e000      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80024e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80024f0:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80024f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fe:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002500:	430b      	orrs	r3, r1
 8002502:	6513      	str	r3, [r2, #80]	; 0x50
 8002504:	e003      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800250a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800250e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800251a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002524:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002528:	460b      	mov	r3, r1
 800252a:	4313      	orrs	r3, r2
 800252c:	d053      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800252e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800253a:	d035      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800253c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002540:	d82e      	bhi.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002542:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002546:	d031      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002548:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800254c:	d828      	bhi.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800254e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002552:	d01a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002558:	d822      	bhi.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800255e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002562:	d007      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002564:	e01c      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002566:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	4a31      	ldr	r2, [pc, #196]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800256c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002570:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002572:	e01c      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002578:	3308      	adds	r3, #8
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f001 f8c5 	bl	800370c <RCCEx_PLL2_Config>
 8002582:	4603      	mov	r3, r0
 8002584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002588:	e011      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800258a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800258e:	3328      	adds	r3, #40	; 0x28
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f001 f96c 	bl	8003870 <RCCEx_PLL3_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800259e:	e006      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80025a6:	e002      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80025a8:	bf00      	nop
 80025aa:	e000      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80025ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10b      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80025be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80025c6:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6593      	str	r3, [r2, #88]	; 0x58
 80025cc:	e003      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80025d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80025e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80025f0:	460b      	mov	r3, r1
 80025f2:	4313      	orrs	r3, r2
 80025f4:	d056      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80025f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80025fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002602:	d038      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002608:	d831      	bhi.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800260a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800260e:	d034      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002610:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002614:	d82b      	bhi.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800261a:	d01d      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800261c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002620:	d825      	bhi.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d006      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002626:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800262c:	e01f      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800262e:	bf00      	nop
 8002630:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002634:	4ba2      	ldr	r3, [pc, #648]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	4aa1      	ldr	r2, [pc, #644]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800263a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002640:	e01c      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002646:	3308      	adds	r3, #8
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f001 f85e 	bl	800370c <RCCEx_PLL2_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002656:	e011      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800265c:	3328      	adds	r3, #40	; 0x28
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f001 f905 	bl	8003870 <RCCEx_PLL3_Config>
 8002666:	4603      	mov	r3, r0
 8002668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800266c:	e006      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002674:	e002      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800267a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800267c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002684:	4b8e      	ldr	r3, [pc, #568]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800268c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002690:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002694:	4a8a      	ldr	r2, [pc, #552]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002696:	430b      	orrs	r3, r1
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
 800269a:	e003      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80026b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80026ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80026be:	460b      	mov	r3, r1
 80026c0:	4313      	orrs	r3, r2
 80026c2:	d03a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80026c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	2b30      	cmp	r3, #48	; 0x30
 80026cc:	d01f      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80026ce:	2b30      	cmp	r3, #48	; 0x30
 80026d0:	d819      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d00c      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d815      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d019      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d111      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e2:	4b77      	ldr	r3, [pc, #476]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	4a76      	ldr	r2, [pc, #472]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80026ee:	e011      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026f4:	3308      	adds	r3, #8
 80026f6:	2102      	movs	r1, #2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 f807 	bl	800370c <RCCEx_PLL2_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002704:	e006      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800270c:	e002      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800271c:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	4a65      	ldr	r2, [pc, #404]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800272c:	430b      	orrs	r3, r1
 800272e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002730:	e003      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800273a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002746:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002750:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002754:	460b      	mov	r3, r1
 8002756:	4313      	orrs	r3, r2
 8002758:	d051      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800275a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800275e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002764:	d035      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800276a:	d82e      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800276c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002770:	d031      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002776:	d828      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277c:	d01a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002782:	d822      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278c:	d007      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800278e:	e01c      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002790:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	4a4a      	ldr	r2, [pc, #296]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800279c:	e01c      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800279e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027a2:	3308      	adds	r3, #8
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 ffb0 	bl	800370c <RCCEx_PLL2_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027b2:	e011      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027b8:	3328      	adds	r3, #40	; 0x28
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 f857 	bl	8003870 <RCCEx_PLL3_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027c8:	e006      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027d0:	e002      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80027d2:	bf00      	nop
 80027d4:	e000      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80027d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027e0:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80027e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027f0:	430b      	orrs	r3, r1
 80027f2:	6513      	str	r3, [r2, #80]	; 0x50
 80027f4:	e003      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800280a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800280e:	2300      	movs	r3, #0
 8002810:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002814:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002818:	460b      	mov	r3, r1
 800281a:	4313      	orrs	r3, r2
 800281c:	d056      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800281e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002828:	d033      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800282a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800282e:	d82c      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002834:	d02f      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800283a:	d826      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800283c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002840:	d02b      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002842:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002846:	d820      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800284c:	d012      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800284e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002852:	d81a      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002854:	2b00      	cmp	r3, #0
 8002856:	d022      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d115      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800285e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002862:	3308      	adds	r3, #8
 8002864:	2101      	movs	r1, #1
 8002866:	4618      	mov	r0, r3
 8002868:	f000 ff50 	bl	800370c <RCCEx_PLL2_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002872:	e015      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002878:	3328      	adds	r3, #40	; 0x28
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fff7 	bl	8003870 <RCCEx_PLL3_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002888:	e00a      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002890:	e006      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002892:	bf00      	nop
 8002894:	e004      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002896:	bf00      	nop
 8002898:	e002      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800289e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10d      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80028b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b6:	4a02      	ldr	r2, [pc, #8]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6513      	str	r3, [r2, #80]	; 0x50
 80028bc:	e006      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80028be:	bf00      	nop
 80028c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80028d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4313      	orrs	r3, r2
 80028ea:	d055      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80028ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f8:	d033      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80028fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028fe:	d82c      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d02f      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290a:	d826      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800290c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002910:	d02b      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002912:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002916:	d820      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291c:	d012      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800291e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002922:	d81a      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d022      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800292c:	d115      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800292e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002932:	3308      	adds	r3, #8
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fee8 	bl	800370c <RCCEx_PLL2_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002942:	e015      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002948:	3328      	adds	r3, #40	; 0x28
 800294a:	2101      	movs	r1, #1
 800294c:	4618      	mov	r0, r3
 800294e:	f000 ff8f 	bl	8003870 <RCCEx_PLL3_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002958:	e00a      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002960:	e006      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002962:	bf00      	nop
 8002964:	e004      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002966:	bf00      	nop
 8002968:	e002      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800296a:	bf00      	nop
 800296c:	e000      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800296e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10b      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002978:	4ba3      	ldr	r3, [pc, #652]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002988:	4a9f      	ldr	r2, [pc, #636]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800298a:	430b      	orrs	r3, r1
 800298c:	6593      	str	r3, [r2, #88]	; 0x58
 800298e:	e003      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002994:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80029a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80029ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029b2:	460b      	mov	r3, r1
 80029b4:	4313      	orrs	r3, r2
 80029b6:	d037      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80029b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c2:	d00e      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80029c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c8:	d816      	bhi.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d018      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80029ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d2:	d111      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d4:	4b8c      	ldr	r3, [pc, #560]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	4a8b      	ldr	r2, [pc, #556]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029e0:	e00f      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029e6:	3308      	adds	r3, #8
 80029e8:	2101      	movs	r1, #1
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fe8e 	bl	800370c <RCCEx_PLL2_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029f6:	e004      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029fe:	e000      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a0a:	4b7f      	ldr	r3, [pc, #508]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a7b      	ldr	r2, [pc, #492]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	6513      	str	r3, [r2, #80]	; 0x50
 8002a1e:	e003      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4313      	orrs	r3, r2
 8002a46:	d039      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d81c      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002a52:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002a95 	.word	0x08002a95
 8002a5c:	08002a69 	.word	0x08002a69
 8002a60:	08002a77 	.word	0x08002a77
 8002a64:	08002a95 	.word	0x08002a95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a68:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	4a66      	ldr	r2, [pc, #408]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a74:	e00f      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fe44 	bl	800370c <RCCEx_PLL2_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a8a:	e004      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a92:	e000      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a9e:	4b5a      	ldr	r3, [pc, #360]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	f023 0103 	bic.w	r1, r3, #3
 8002aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aac:	4a56      	ldr	r2, [pc, #344]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ab2:	e003      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ab8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ad2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f000 809f 	beq.w	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ade:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aea:	f7fe f937 	bl	8000d5c <HAL_GetTick>
 8002aee:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002af2:	e00b      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af4:	f7fe f932 	bl	8000d5c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	; 0x64
 8002b02:	d903      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b0a:	e005      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b0c:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ed      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d179      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b20:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b2c:	4053      	eors	r3, r2
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d015      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b36:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b42:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4a30      	ldr	r2, [pc, #192]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a2d      	ldr	r2, [pc, #180]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b5a:	4a2b      	ldr	r2, [pc, #172]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6e:	d118      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe f8f4 	bl	8000d5c <HAL_GetTick>
 8002b74:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b78:	e00d      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7fe f8ef 	bl	8000d5c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b84:	1ad2      	subs	r2, r2, r3
 8002b86:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d903      	bls.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002b94:	e005      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0eb      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d129      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bba:	d10e      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bcc:	091a      	lsrs	r2, r3, #4
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	4a0d      	ldr	r2, [pc, #52]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6113      	str	r3, [r2, #16]
 8002bd8:	e005      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002be0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002be4:	6113      	str	r3, [r2, #16]
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002be8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfc:	e00e      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002c06:	e009      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002c08:	58024400 	.word	0x58024400
 8002c0c:	58024800 	.word	0x58024800
 8002c10:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f002 0301 	and.w	r3, r2, #1
 8002c28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f000 8089 	beq.w	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c44:	2b28      	cmp	r3, #40	; 0x28
 8002c46:	d86b      	bhi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002d29 	.word	0x08002d29
 8002c54:	08002d21 	.word	0x08002d21
 8002c58:	08002d21 	.word	0x08002d21
 8002c5c:	08002d21 	.word	0x08002d21
 8002c60:	08002d21 	.word	0x08002d21
 8002c64:	08002d21 	.word	0x08002d21
 8002c68:	08002d21 	.word	0x08002d21
 8002c6c:	08002d21 	.word	0x08002d21
 8002c70:	08002cf5 	.word	0x08002cf5
 8002c74:	08002d21 	.word	0x08002d21
 8002c78:	08002d21 	.word	0x08002d21
 8002c7c:	08002d21 	.word	0x08002d21
 8002c80:	08002d21 	.word	0x08002d21
 8002c84:	08002d21 	.word	0x08002d21
 8002c88:	08002d21 	.word	0x08002d21
 8002c8c:	08002d21 	.word	0x08002d21
 8002c90:	08002d0b 	.word	0x08002d0b
 8002c94:	08002d21 	.word	0x08002d21
 8002c98:	08002d21 	.word	0x08002d21
 8002c9c:	08002d21 	.word	0x08002d21
 8002ca0:	08002d21 	.word	0x08002d21
 8002ca4:	08002d21 	.word	0x08002d21
 8002ca8:	08002d21 	.word	0x08002d21
 8002cac:	08002d21 	.word	0x08002d21
 8002cb0:	08002d29 	.word	0x08002d29
 8002cb4:	08002d21 	.word	0x08002d21
 8002cb8:	08002d21 	.word	0x08002d21
 8002cbc:	08002d21 	.word	0x08002d21
 8002cc0:	08002d21 	.word	0x08002d21
 8002cc4:	08002d21 	.word	0x08002d21
 8002cc8:	08002d21 	.word	0x08002d21
 8002ccc:	08002d21 	.word	0x08002d21
 8002cd0:	08002d29 	.word	0x08002d29
 8002cd4:	08002d21 	.word	0x08002d21
 8002cd8:	08002d21 	.word	0x08002d21
 8002cdc:	08002d21 	.word	0x08002d21
 8002ce0:	08002d21 	.word	0x08002d21
 8002ce4:	08002d21 	.word	0x08002d21
 8002ce8:	08002d21 	.word	0x08002d21
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	08002d29 	.word	0x08002d29
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fd05 	bl	800370c <RCCEx_PLL2_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d08:	e00f      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d0e:	3328      	adds	r3, #40	; 0x28
 8002d10:	2101      	movs	r1, #1
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fdac 	bl	8003870 <RCCEx_PLL3_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d1e:	e004      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d26:	e000      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d32:	4bbf      	ldr	r3, [pc, #764]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d40:	4abb      	ldr	r2, [pc, #748]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d42:	430b      	orrs	r3, r1
 8002d44:	6553      	str	r3, [r2, #84]	; 0x54
 8002d46:	e003      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f002 0302 	and.w	r3, r2, #2
 8002d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	d041      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d824      	bhi.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002dcd 	.word	0x08002dcd
 8002d84:	08002d99 	.word	0x08002d99
 8002d88:	08002daf 	.word	0x08002daf
 8002d8c:	08002dcd 	.word	0x08002dcd
 8002d90:	08002dcd 	.word	0x08002dcd
 8002d94:	08002dcd 	.word	0x08002dcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fcb3 	bl	800370c <RCCEx_PLL2_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dac:	e00f      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db2:	3328      	adds	r3, #40	; 0x28
 8002db4:	2101      	movs	r1, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd5a 	bl	8003870 <RCCEx_PLL3_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dc2:	e004      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002dca:	e000      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002dd6:	4b96      	ldr	r3, [pc, #600]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	f023 0107 	bic.w	r1, r3, #7
 8002dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de4:	4a92      	ldr	r2, [pc, #584]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002de6:	430b      	orrs	r3, r1
 8002de8:	6553      	str	r3, [r2, #84]	; 0x54
 8002dea:	e003      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002df0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f002 0304 	and.w	r3, r2, #4
 8002e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e0a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4313      	orrs	r3, r2
 8002e12:	d044      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1c:	2b05      	cmp	r3, #5
 8002e1e:	d825      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e75 	.word	0x08002e75
 8002e2c:	08002e41 	.word	0x08002e41
 8002e30:	08002e57 	.word	0x08002e57
 8002e34:	08002e75 	.word	0x08002e75
 8002e38:	08002e75 	.word	0x08002e75
 8002e3c:	08002e75 	.word	0x08002e75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e44:	3308      	adds	r3, #8
 8002e46:	2101      	movs	r1, #1
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fc5f 	bl	800370c <RCCEx_PLL2_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e54:	e00f      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e5a:	3328      	adds	r3, #40	; 0x28
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fd06 	bl	8003870 <RCCEx_PLL3_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e6a:	e004      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e72:	e000      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	f023 0107 	bic.w	r1, r3, #7
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8e:	4a68      	ldr	r2, [pc, #416]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6593      	str	r3, [r2, #88]	; 0x58
 8002e94:	e003      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f002 0320 	and.w	r3, r2, #32
 8002eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	d055      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eca:	d033      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed0:	d82c      	bhi.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed6:	d02f      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d826      	bhi.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002ede:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ee2:	d02b      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002ee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ee8:	d820      	bhi.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eee:	d012      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef4:	d81a      	bhi.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d022      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002efe:	d115      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f04:	3308      	adds	r3, #8
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fbff 	bl	800370c <RCCEx_PLL2_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f14:	e015      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1a:	3328      	adds	r3, #40	; 0x28
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fca6 	bl	8003870 <RCCEx_PLL3_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f32:	e006      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f34:	bf00      	nop
 8002f36:	e004      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f38:	bf00      	nop
 8002f3a:	e002      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f4a:	4b39      	ldr	r3, [pc, #228]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	4a35      	ldr	r2, [pc, #212]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6553      	str	r3, [r2, #84]	; 0x54
 8002f60:	e003      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4313      	orrs	r3, r2
 8002f88:	d058      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f96:	d033      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002f98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f9c:	d82c      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa2:	d02f      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa8:	d826      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fae:	d02b      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fb4:	d820      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fba:	d012      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc0:	d81a      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d022      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fca:	d115      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fb99 	bl	800370c <RCCEx_PLL2_Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002fe0:	e015      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe6:	3328      	adds	r3, #40	; 0x28
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fc40 	bl	8003870 <RCCEx_PLL3_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002ff6:	e00a      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ffe:	e006      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003000:	bf00      	nop
 8003002:	e004      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003004:	bf00      	nop
 8003006:	e002      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003008:	bf00      	nop
 800300a:	e000      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800300c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10e      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003026:	4a02      	ldr	r2, [pc, #8]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003028:	430b      	orrs	r3, r1
 800302a:	6593      	str	r3, [r2, #88]	; 0x58
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800302e:	bf00      	nop
 8003030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003038:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800303c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003052:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003056:	460b      	mov	r3, r1
 8003058:	4313      	orrs	r3, r2
 800305a:	d055      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800305c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003060:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003064:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003068:	d033      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800306a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800306e:	d82c      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003074:	d02f      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800307a:	d826      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800307c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003080:	d02b      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003082:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003086:	d820      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308c:	d012      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800308e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003092:	d81a      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d022      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309c:	d115      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800309e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030a2:	3308      	adds	r3, #8
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fb30 	bl	800370c <RCCEx_PLL2_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030b2:	e015      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b8:	3328      	adds	r3, #40	; 0x28
 80030ba:	2102      	movs	r1, #2
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fbd7 	bl	8003870 <RCCEx_PLL3_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030c8:	e00a      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030d0:	e006      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80030d2:	bf00      	nop
 80030d4:	e004      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80030d6:	bf00      	nop
 80030d8:	e002      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80030de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030e8:	4ba1      	ldr	r3, [pc, #644]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80030f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030f8:	4a9d      	ldr	r2, [pc, #628]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030fa:	430b      	orrs	r3, r1
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
 80030fe:	e003      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f002 0308 	and.w	r3, r2, #8
 8003114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800311e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003122:	460b      	mov	r3, r1
 8003124:	4313      	orrs	r3, r2
 8003126:	d01e      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003134:	d10c      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800313a:	3328      	adds	r3, #40	; 0x28
 800313c:	2102      	movs	r1, #2
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fb96 	bl	8003870 <RCCEx_PLL3_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003150:	4b87      	ldr	r3, [pc, #540]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800315c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003160:	4a83      	ldr	r2, [pc, #524]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003162:	430b      	orrs	r3, r1
 8003164:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f002 0310 	and.w	r3, r2, #16
 8003172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003176:	2300      	movs	r3, #0
 8003178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800317c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003180:	460b      	mov	r3, r1
 8003182:	4313      	orrs	r3, r2
 8003184:	d01e      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800318a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003192:	d10c      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003198:	3328      	adds	r3, #40	; 0x28
 800319a:	2102      	movs	r1, #2
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fb67 	bl	8003870 <RCCEx_PLL3_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031ae:	4b70      	ldr	r3, [pc, #448]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031be:	4a6c      	ldr	r2, [pc, #432]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80031d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80031de:	460b      	mov	r3, r1
 80031e0:	4313      	orrs	r3, r2
 80031e2:	d03e      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80031e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f0:	d022      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80031f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f6:	d81b      	bhi.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d00b      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003202:	e015      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003208:	3308      	adds	r3, #8
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fa7d 	bl	800370c <RCCEx_PLL2_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003218:	e00f      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800321a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800321e:	3328      	adds	r3, #40	; 0x28
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fb24 	bl	8003870 <RCCEx_PLL3_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800322e:	e004      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003242:	4b4b      	ldr	r3, [pc, #300]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800324e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003254:	430b      	orrs	r3, r1
 8003256:	6593      	str	r3, [r2, #88]	; 0x58
 8003258:	e003      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800325e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800326e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003270:	2300      	movs	r3, #0
 8003272:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003274:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003278:	460b      	mov	r3, r1
 800327a:	4313      	orrs	r3, r2
 800327c:	d03b      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800327e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800328a:	d01f      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800328c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003290:	d818      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003296:	d003      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800329c:	d007      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800329e:	e011      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	4a32      	ldr	r2, [pc, #200]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80032ac:	e00f      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b2:	3328      	adds	r3, #40	; 0x28
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fada 	bl	8003870 <RCCEx_PLL3_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80032c2:	e004      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80032cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6553      	str	r3, [r2, #84]	; 0x54
 80032ec:	e003      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003302:	673b      	str	r3, [r7, #112]	; 0x70
 8003304:	2300      	movs	r3, #0
 8003306:	677b      	str	r3, [r7, #116]	; 0x74
 8003308:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800330c:	460b      	mov	r3, r1
 800330e:	4313      	orrs	r3, r2
 8003310:	d034      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d007      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003322:	e011      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800332a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003330:	e00e      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003336:	3308      	adds	r3, #8
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f9e6 	bl	800370c <RCCEx_PLL2_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003346:	e003      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800334e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003366:	4a02      	ldr	r2, [pc, #8]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003368:	430b      	orrs	r3, r1
 800336a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800336e:	bf00      	nop
 8003370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003388:	66bb      	str	r3, [r7, #104]	; 0x68
 800338a:	2300      	movs	r3, #0
 800338c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800338e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003392:	460b      	mov	r3, r1
 8003394:	4313      	orrs	r3, r2
 8003396:	d00c      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339c:	3328      	adds	r3, #40	; 0x28
 800339e:	2102      	movs	r1, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fa65 	bl	8003870 <RCCEx_PLL3_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80033be:	663b      	str	r3, [r7, #96]	; 0x60
 80033c0:	2300      	movs	r3, #0
 80033c2:	667b      	str	r3, [r7, #100]	; 0x64
 80033c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80033c8:	460b      	mov	r3, r1
 80033ca:	4313      	orrs	r3, r2
 80033cc:	d038      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033da:	d018      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80033dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e0:	d811      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d014      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ec:	d80b      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d011      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80033f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f6:	d106      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f8:	4bc3      	ldr	r3, [pc, #780]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	4ac2      	ldr	r2, [pc, #776]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003404:	e008      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800340c:	e004      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800340e:	bf00      	nop
 8003410:	e002      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003412:	bf00      	nop
 8003414:	e000      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003420:	4bb9      	ldr	r3, [pc, #740]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003424:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003430:	4ab5      	ldr	r2, [pc, #724]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003432:	430b      	orrs	r3, r1
 8003434:	6553      	str	r3, [r2, #84]	; 0x54
 8003436:	e003      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800343c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800344c:	65bb      	str	r3, [r7, #88]	; 0x58
 800344e:	2300      	movs	r3, #0
 8003450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003452:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003456:	460b      	mov	r3, r1
 8003458:	4313      	orrs	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800345c:	4baa      	ldr	r3, [pc, #680]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800345e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003460:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346a:	4aa7      	ldr	r2, [pc, #668]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800346c:	430b      	orrs	r3, r1
 800346e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800347c:	653b      	str	r3, [r7, #80]	; 0x50
 800347e:	2300      	movs	r3, #0
 8003480:	657b      	str	r3, [r7, #84]	; 0x54
 8003482:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003486:	460b      	mov	r3, r1
 8003488:	4313      	orrs	r3, r2
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800348c:	4b9e      	ldr	r3, [pc, #632]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003498:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800349c:	4a9a      	ldr	r2, [pc, #616]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80034ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b0:	2300      	movs	r3, #0
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80034b8:	460b      	mov	r3, r1
 80034ba:	4313      	orrs	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034be:	4b92      	ldr	r3, [pc, #584]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80034c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034cc:	4a8e      	ldr	r2, [pc, #568]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80034de:	643b      	str	r3, [r7, #64]	; 0x40
 80034e0:	2300      	movs	r3, #0
 80034e2:	647b      	str	r3, [r7, #68]	; 0x44
 80034e4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80034e8:	460b      	mov	r3, r1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034ee:	4b86      	ldr	r3, [pc, #536]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	4a85      	ldr	r2, [pc, #532]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034f8:	6113      	str	r3, [r2, #16]
 80034fa:	4b83      	ldr	r3, [pc, #524]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034fc:	6919      	ldr	r1, [r3, #16]
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003502:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003506:	4a80      	ldr	r2, [pc, #512]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003508:	430b      	orrs	r3, r1
 800350a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003518:	63bb      	str	r3, [r7, #56]	; 0x38
 800351a:	2300      	movs	r3, #0
 800351c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800351e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003522:	460b      	mov	r3, r1
 8003524:	4313      	orrs	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003528:	4b77      	ldr	r3, [pc, #476]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800352a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	4a74      	ldr	r2, [pc, #464]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003538:	430b      	orrs	r3, r1
 800353a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800353c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003548:	633b      	str	r3, [r7, #48]	; 0x30
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
 800354e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003552:	460b      	mov	r3, r1
 8003554:	4313      	orrs	r3, r2
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003558:	4b6b      	ldr	r3, [pc, #428]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003568:	4a67      	ldr	r2, [pc, #412]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800356a:	430b      	orrs	r3, r1
 800356c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	2100      	movs	r1, #0
 8003578:	62b9      	str	r1, [r7, #40]	; 0x28
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003580:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003584:	460b      	mov	r3, r1
 8003586:	4313      	orrs	r3, r2
 8003588:	d011      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358e:	3308      	adds	r3, #8
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f8ba 	bl	800370c <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800359e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	2100      	movs	r1, #0
 80035b8:	6239      	str	r1, [r7, #32]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
 80035c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035c4:	460b      	mov	r3, r1
 80035c6:	4313      	orrs	r3, r2
 80035c8:	d011      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ce:	3308      	adds	r3, #8
 80035d0:	2101      	movs	r1, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f89a 	bl	800370c <RCCEx_PLL2_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80035de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	2100      	movs	r1, #0
 80035f8:	61b9      	str	r1, [r7, #24]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003604:	460b      	mov	r3, r1
 8003606:	4313      	orrs	r3, r2
 8003608:	d011      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360e:	3308      	adds	r3, #8
 8003610:	2102      	movs	r1, #2
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f87a 	bl	800370c <RCCEx_PLL2_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800361e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800362a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	2100      	movs	r1, #0
 8003638:	6139      	str	r1, [r7, #16]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003644:	460b      	mov	r3, r1
 8003646:	4313      	orrs	r3, r2
 8003648:	d011      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364e:	3328      	adds	r3, #40	; 0x28
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f90c 	bl	8003870 <RCCEx_PLL3_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800366a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	2100      	movs	r1, #0
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003684:	460b      	mov	r3, r1
 8003686:	4313      	orrs	r3, r2
 8003688:	d011      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368e:	3328      	adds	r3, #40	; 0x28
 8003690:	2101      	movs	r1, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f8ec 	bl	8003870 <RCCEx_PLL3_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800369e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	2100      	movs	r1, #0
 80036b8:	6039      	str	r1, [r7, #0]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036c4:	460b      	mov	r3, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	d011      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ce:	3328      	adds	r3, #40	; 0x28
 80036d0:	2102      	movs	r1, #2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f8cc 	bl	8003870 <RCCEx_PLL3_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80036de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80036ee:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e000      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003702:	46bd      	mov	sp, r7
 8003704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003708:	58024400 	.word	0x58024400

0800370c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800371a:	4b53      	ldr	r3, [pc, #332]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b03      	cmp	r3, #3
 8003724:	d101      	bne.n	800372a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e099      	b.n	800385e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800372a:	4b4f      	ldr	r3, [pc, #316]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a4e      	ldr	r2, [pc, #312]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 8003730:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003736:	f7fd fb11 	bl	8000d5c <HAL_GetTick>
 800373a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800373c:	e008      	b.n	8003750 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800373e:	f7fd fb0d 	bl	8000d5c <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e086      	b.n	800385e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003750:	4b45      	ldr	r3, [pc, #276]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f0      	bne.n	800373e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800375c:	4b42      	ldr	r3, [pc, #264]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	031b      	lsls	r3, r3, #12
 800376a:	493f      	ldr	r1, [pc, #252]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	628b      	str	r3, [r1, #40]	; 0x28
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	3b01      	subs	r3, #1
 8003776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	3b01      	subs	r3, #1
 8003780:	025b      	lsls	r3, r3, #9
 8003782:	b29b      	uxth	r3, r3
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	3b01      	subs	r3, #1
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	3b01      	subs	r3, #1
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037a0:	4931      	ldr	r1, [pc, #196]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80037a6:	4b30      	ldr	r3, [pc, #192]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	492d      	ldr	r1, [pc, #180]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80037b8:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	f023 0220 	bic.w	r2, r3, #32
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	4928      	ldr	r1, [pc, #160]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80037ca:	4b27      	ldr	r3, [pc, #156]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	4a26      	ldr	r2, [pc, #152]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037d0:	f023 0310 	bic.w	r3, r3, #16
 80037d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <RCCEx_PLL2_Config+0x160>)
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	69d2      	ldr	r2, [r2, #28]
 80037e2:	00d2      	lsls	r2, r2, #3
 80037e4:	4920      	ldr	r1, [pc, #128]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80037ea:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037f0:	f043 0310 	orr.w	r3, r3, #16
 80037f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80037fc:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	4a19      	ldr	r2, [pc, #100]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 8003802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003806:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003808:	e00f      	b.n	800382a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d106      	bne.n	800381e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003810:	4b15      	ldr	r3, [pc, #84]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 8003816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800381a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800381c:	e005      	b.n	800382a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	4a11      	ldr	r2, [pc, #68]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 8003824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003828:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a0e      	ldr	r2, [pc, #56]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 8003830:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003836:	f7fd fa91 	bl	8000d5c <HAL_GetTick>
 800383a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800383c:	e008      	b.n	8003850 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800383e:	f7fd fa8d 	bl	8000d5c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e006      	b.n	800385e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <RCCEx_PLL2_Config+0x15c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	58024400 	.word	0x58024400
 800386c:	ffff0007 	.word	0xffff0007

08003870 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800387e:	4b53      	ldr	r3, [pc, #332]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b03      	cmp	r3, #3
 8003888:	d101      	bne.n	800388e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e099      	b.n	80039c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800388e:	4b4f      	ldr	r3, [pc, #316]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a4e      	ldr	r2, [pc, #312]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389a:	f7fd fa5f 	bl	8000d5c <HAL_GetTick>
 800389e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038a0:	e008      	b.n	80038b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80038a2:	f7fd fa5b 	bl	8000d5c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e086      	b.n	80039c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038b4:	4b45      	ldr	r3, [pc, #276]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f0      	bne.n	80038a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	051b      	lsls	r3, r3, #20
 80038ce:	493f      	ldr	r1, [pc, #252]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	628b      	str	r3, [r1, #40]	; 0x28
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	3b01      	subs	r3, #1
 80038da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	025b      	lsls	r3, r3, #9
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	061b      	lsls	r3, r3, #24
 8003900:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003904:	4931      	ldr	r1, [pc, #196]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003906:	4313      	orrs	r3, r2
 8003908:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800390a:	4b30      	ldr	r3, [pc, #192]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	492d      	ldr	r1, [pc, #180]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003918:	4313      	orrs	r3, r2
 800391a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800391c:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	4928      	ldr	r1, [pc, #160]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 800392a:	4313      	orrs	r3, r2
 800392c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800392e:	4b27      	ldr	r3, [pc, #156]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4a26      	ldr	r2, [pc, #152]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 800393c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <RCCEx_PLL3_Config+0x160>)
 8003940:	4013      	ands	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	69d2      	ldr	r2, [r2, #28]
 8003946:	00d2      	lsls	r2, r2, #3
 8003948:	4920      	ldr	r1, [pc, #128]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	4a19      	ldr	r2, [pc, #100]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003966:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800396a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800396c:	e00f      	b.n	800398e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d106      	bne.n	8003982 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003974:	4b15      	ldr	r3, [pc, #84]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	4a14      	ldr	r2, [pc, #80]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 800397a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800397e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003980:	e005      	b.n	800398e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	4a11      	ldr	r2, [pc, #68]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800398c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a0e      	ldr	r2, [pc, #56]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399a:	f7fd f9df 	bl	8000d5c <HAL_GetTick>
 800399e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039a0:	e008      	b.n	80039b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80039a2:	f7fd f9db 	bl	8000d5c <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e006      	b.n	80039c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <RCCEx_PLL3_Config+0x15c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
 80039d0:	ffff0007 	.word	0xffff0007

080039d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e10f      	b.n	8003c06 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a87      	ldr	r2, [pc, #540]	; (8003c10 <HAL_SPI_Init+0x23c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <HAL_SPI_Init+0x42>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a86      	ldr	r2, [pc, #536]	; (8003c14 <HAL_SPI_Init+0x240>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00a      	beq.n	8003a16 <HAL_SPI_Init+0x42>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a84      	ldr	r2, [pc, #528]	; (8003c18 <HAL_SPI_Init+0x244>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d005      	beq.n	8003a16 <HAL_SPI_Init+0x42>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	d901      	bls.n	8003a16 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0f7      	b.n	8003c06 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fbca 	bl	80041b0 <SPI_GetPacketSize>
 8003a1c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a7b      	ldr	r2, [pc, #492]	; (8003c10 <HAL_SPI_Init+0x23c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00c      	beq.n	8003a42 <HAL_SPI_Init+0x6e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a79      	ldr	r2, [pc, #484]	; (8003c14 <HAL_SPI_Init+0x240>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <HAL_SPI_Init+0x6e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a78      	ldr	r2, [pc, #480]	; (8003c18 <HAL_SPI_Init+0x244>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d002      	beq.n	8003a42 <HAL_SPI_Init+0x6e>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d811      	bhi.n	8003a66 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003a46:	4a72      	ldr	r2, [pc, #456]	; (8003c10 <HAL_SPI_Init+0x23c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d009      	beq.n	8003a60 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a70      	ldr	r2, [pc, #448]	; (8003c14 <HAL_SPI_Init+0x240>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_SPI_Init+0x8c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6f      	ldr	r2, [pc, #444]	; (8003c18 <HAL_SPI_Init+0x244>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d104      	bne.n	8003a6a <HAL_SPI_Init+0x96>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d901      	bls.n	8003a6a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0cd      	b.n	8003c06 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fc ff3c 	bl	80008fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003aa6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ab0:	d119      	bne.n	8003ae6 <HAL_SPI_Init+0x112>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aba:	d103      	bne.n	8003ac4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10c      	bne.n	8003ae6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad4:	d107      	bne.n	8003ae6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ae4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00f      	beq.n	8003b12 <HAL_SPI_Init+0x13e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d90b      	bls.n	8003b12 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e007      	b.n	8003b22 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	ea42 0103 	orr.w	r1, r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b82:	ea42 0103 	orr.w	r1, r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d113      	bne.n	8003bc2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bc0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40013000 	.word	0x40013000
 8003c14:	40003800 	.word	0x40003800
 8003c18:	40003c00 	.word	0x40003c00

08003c1c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3320      	adds	r3, #32
 8003c32:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_SPI_Transmit+0x2a>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e1e1      	b.n	800400a <HAL_SPI_Transmit+0x3ee>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4e:	f7fd f885 	bl	8000d5c <HAL_GetTick>
 8003c52:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d007      	beq.n	8003c70 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
 8003c62:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003c6c:	7efb      	ldrb	r3, [r7, #27]
 8003c6e:	e1cc      	b.n	800400a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_SPI_Transmit+0x60>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003c88:	7efb      	ldrb	r3, [r7, #27]
 8003c8a:	e1be      	b.n	800400a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2203      	movs	r2, #3
 8003c90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	88fa      	ldrh	r2, [r7, #6]
 8003ca6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003cdc:	d108      	bne.n	8003cf0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e009      	b.n	8003d04 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d02:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	4b96      	ldr	r3, [pc, #600]	; (8003f64 <HAL_SPI_Transmit+0x348>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	88f9      	ldrh	r1, [r7, #6]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d30:	d107      	bne.n	8003d42 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	d947      	bls.n	8003dda <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003d4a:	e03f      	b.n	8003dcc <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d114      	bne.n	8003d84 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003d82:	e023      	b.n	8003dcc <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d84:	f7fc ffea 	bl	8000d5c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d803      	bhi.n	8003d9c <HAL_SPI_Transmit+0x180>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d102      	bne.n	8003da2 <HAL_SPI_Transmit+0x186>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d114      	bne.n	8003dcc <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f936 	bl	8004014 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e11e      	b.n	800400a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1b9      	bne.n	8003d4c <HAL_SPI_Transmit+0x130>
 8003dd8:	e0f1      	b.n	8003fbe <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b07      	cmp	r3, #7
 8003de0:	f240 80e6 	bls.w	8003fb0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003de4:	e05d      	b.n	8003ea2 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d132      	bne.n	8003e5a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d918      	bls.n	8003e32 <HAL_SPI_Transmit+0x216>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d014      	beq.n	8003e32 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	1d1a      	adds	r2, r3, #4
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b02      	subs	r3, #2
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003e30:	e037      	b.n	8003ea2 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	881a      	ldrh	r2, [r3, #0]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	1c9a      	adds	r2, r3, #2
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003e58:	e023      	b.n	8003ea2 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5a:	f7fc ff7f 	bl	8000d5c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d803      	bhi.n	8003e72 <HAL_SPI_Transmit+0x256>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d102      	bne.n	8003e78 <HAL_SPI_Transmit+0x25c>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d114      	bne.n	8003ea2 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f8cb 	bl	8004014 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0b3      	b.n	800400a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d19b      	bne.n	8003de6 <HAL_SPI_Transmit+0x1ca>
 8003eae:	e086      	b.n	8003fbe <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d154      	bne.n	8003f68 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d918      	bls.n	8003efc <HAL_SPI_Transmit+0x2e0>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d914      	bls.n	8003efc <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	1d1a      	adds	r2, r3, #4
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b04      	subs	r3, #4
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003efa:	e059      	b.n	8003fb0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d917      	bls.n	8003f38 <HAL_SPI_Transmit+0x31c>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d013      	beq.n	8003f38 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	881a      	ldrh	r2, [r3, #0]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	1c9a      	adds	r2, r3, #2
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b02      	subs	r3, #2
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003f36:	e03b      	b.n	8003fb0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3320      	adds	r3, #32
 8003f42:	7812      	ldrb	r2, [r2, #0]
 8003f44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003f62:	e025      	b.n	8003fb0 <HAL_SPI_Transmit+0x394>
 8003f64:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f68:	f7fc fef8 	bl	8000d5c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d803      	bhi.n	8003f80 <HAL_SPI_Transmit+0x364>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d102      	bne.n	8003f86 <HAL_SPI_Transmit+0x36a>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d114      	bne.n	8003fb0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f844 	bl	8004014 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e02c      	b.n	800400a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f47f af79 	bne.w	8003eb0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2108      	movs	r1, #8
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f8c3 	bl	8004154 <SPI_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f815 	bl	8004014 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8004008:	7efb      	ldrb	r3, [r7, #27]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop

08004014 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0208 	orr.w	r2, r2, #8
 8004032:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0210 	orr.w	r2, r2, #16
 8004042:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6919      	ldr	r1, [r3, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b3c      	ldr	r3, [pc, #240]	; (8004150 <SPI_CloseTransfer+0x13c>)
 8004060:	400b      	ands	r3, r1
 8004062:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004072:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b04      	cmp	r3, #4
 800407e:	d014      	beq.n	80040aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00f      	beq.n	80040aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699a      	ldr	r2, [r3, #24]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0220 	orr.w	r2, r2, #32
 80040a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d014      	beq.n	80040e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00f      	beq.n	80040e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00f      	beq.n	800410a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f0:	f043 0201 	orr.w	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004108:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00f      	beq.n	8004134 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411a:	f043 0208 	orr.w	r2, r3, #8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004132:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	fffffc90 	.word	0xfffffc90

08004154 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004164:	e010      	b.n	8004188 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004166:	f7fc fdf9 	bl	8000d5c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d803      	bhi.n	800417e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d102      	bne.n	8004184 <SPI_WaitOnFlagUntilTimeout+0x30>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e00f      	b.n	80041a8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4013      	ands	r3, r2
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d0df      	beq.n	8004166 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	3301      	adds	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	3301      	adds	r3, #1
 80041c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3307      	adds	r3, #7
 80041ce:	08db      	lsrs	r3, r3, #3
 80041d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e049      	b.n	800428c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7fc fcd3 	bl	8000bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f000 f92d 	bl	8004484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIM_ConfigClockSource+0x1c>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e0dc      	b.n	800446a <HAL_TIM_ConfigClockSource+0x1d6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <HAL_TIM_ConfigClockSource+0x1e0>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a64      	ldr	r2, [pc, #400]	; (8004478 <HAL_TIM_ConfigClockSource+0x1e4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f000 80a9 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1aa>
 80042ec:	4a62      	ldr	r2, [pc, #392]	; (8004478 <HAL_TIM_ConfigClockSource+0x1e4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	f200 80ae 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 80042f4:	4a61      	ldr	r2, [pc, #388]	; (800447c <HAL_TIM_ConfigClockSource+0x1e8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	f000 80a1 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1aa>
 80042fc:	4a5f      	ldr	r2, [pc, #380]	; (800447c <HAL_TIM_ConfigClockSource+0x1e8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	f200 80a6 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004304:	4a5e      	ldr	r2, [pc, #376]	; (8004480 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004306:	4293      	cmp	r3, r2
 8004308:	f000 8099 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1aa>
 800430c:	4a5c      	ldr	r2, [pc, #368]	; (8004480 <HAL_TIM_ConfigClockSource+0x1ec>)
 800430e:	4293      	cmp	r3, r2
 8004310:	f200 809e 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004314:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004318:	f000 8091 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1aa>
 800431c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004320:	f200 8096 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004328:	f000 8089 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1aa>
 800432c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004330:	f200 808e 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004338:	d03e      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0x124>
 800433a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433e:	f200 8087 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	f000 8086 	beq.w	8004456 <HAL_TIM_ConfigClockSource+0x1c2>
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434e:	d87f      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004350:	2b70      	cmp	r3, #112	; 0x70
 8004352:	d01a      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xf6>
 8004354:	2b70      	cmp	r3, #112	; 0x70
 8004356:	d87b      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004358:	2b60      	cmp	r3, #96	; 0x60
 800435a:	d050      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x16a>
 800435c:	2b60      	cmp	r3, #96	; 0x60
 800435e:	d877      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004360:	2b50      	cmp	r3, #80	; 0x50
 8004362:	d03c      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x14a>
 8004364:	2b50      	cmp	r3, #80	; 0x50
 8004366:	d873      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d058      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x18a>
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d86f      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004370:	2b30      	cmp	r3, #48	; 0x30
 8004372:	d064      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x1aa>
 8004374:	2b30      	cmp	r3, #48	; 0x30
 8004376:	d86b      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d060      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x1aa>
 800437c:	2b20      	cmp	r3, #32
 800437e:	d867      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d05c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x1aa>
 8004384:	2b10      	cmp	r3, #16
 8004386:	d05a      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x1aa>
 8004388:	e062      	b.n	8004450 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f000 f98b 	bl	80046b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	609a      	str	r2, [r3, #8]
      break;
 80043b6:	e04f      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f000 f974 	bl	80046b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043da:	609a      	str	r2, [r3, #8]
      break;
 80043dc:	e03c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 f8e4 	bl	80045b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2150      	movs	r1, #80	; 0x50
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f93e 	bl	8004678 <TIM_ITRx_SetConfig>
      break;
 80043fc:	e02c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	461a      	mov	r2, r3
 800440c:	f000 f903 	bl	8004616 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2160      	movs	r1, #96	; 0x60
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f92e 	bl	8004678 <TIM_ITRx_SetConfig>
      break;
 800441c:	e01c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	461a      	mov	r2, r3
 800442c:	f000 f8c4 	bl	80045b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2140      	movs	r1, #64	; 0x40
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f91e 	bl	8004678 <TIM_ITRx_SetConfig>
      break;
 800443c:	e00c      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f000 f915 	bl	8004678 <TIM_ITRx_SetConfig>
      break;
 800444e:	e003      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      break;
 8004454:	e000      	b.n	8004458 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004468:	7bfb      	ldrb	r3, [r7, #15]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	ffceff88 	.word	0xffceff88
 8004478:	00100040 	.word	0x00100040
 800447c:	00100030 	.word	0x00100030
 8004480:	00100020 	.word	0x00100020

08004484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a40      	ldr	r2, [pc, #256]	; (8004598 <TIM_Base_SetConfig+0x114>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a2:	d00f      	beq.n	80044c4 <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3d      	ldr	r2, [pc, #244]	; (800459c <TIM_Base_SetConfig+0x118>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a3c      	ldr	r2, [pc, #240]	; (80045a0 <TIM_Base_SetConfig+0x11c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a3b      	ldr	r2, [pc, #236]	; (80045a4 <TIM_Base_SetConfig+0x120>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_Base_SetConfig+0x40>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a3a      	ldr	r2, [pc, #232]	; (80045a8 <TIM_Base_SetConfig+0x124>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d108      	bne.n	80044d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2f      	ldr	r2, [pc, #188]	; (8004598 <TIM_Base_SetConfig+0x114>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01f      	beq.n	800451e <TIM_Base_SetConfig+0x9a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d01b      	beq.n	800451e <TIM_Base_SetConfig+0x9a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2c      	ldr	r2, [pc, #176]	; (800459c <TIM_Base_SetConfig+0x118>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d017      	beq.n	800451e <TIM_Base_SetConfig+0x9a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a2b      	ldr	r2, [pc, #172]	; (80045a0 <TIM_Base_SetConfig+0x11c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <TIM_Base_SetConfig+0x9a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a2a      	ldr	r2, [pc, #168]	; (80045a4 <TIM_Base_SetConfig+0x120>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00f      	beq.n	800451e <TIM_Base_SetConfig+0x9a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a29      	ldr	r2, [pc, #164]	; (80045a8 <TIM_Base_SetConfig+0x124>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00b      	beq.n	800451e <TIM_Base_SetConfig+0x9a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a28      	ldr	r2, [pc, #160]	; (80045ac <TIM_Base_SetConfig+0x128>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_Base_SetConfig+0x9a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a27      	ldr	r2, [pc, #156]	; (80045b0 <TIM_Base_SetConfig+0x12c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_Base_SetConfig+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a26      	ldr	r2, [pc, #152]	; (80045b4 <TIM_Base_SetConfig+0x130>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a10      	ldr	r2, [pc, #64]	; (8004598 <TIM_Base_SetConfig+0x114>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00f      	beq.n	800457c <TIM_Base_SetConfig+0xf8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <TIM_Base_SetConfig+0x124>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00b      	beq.n	800457c <TIM_Base_SetConfig+0xf8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a11      	ldr	r2, [pc, #68]	; (80045ac <TIM_Base_SetConfig+0x128>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_Base_SetConfig+0xf8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a10      	ldr	r2, [pc, #64]	; (80045b0 <TIM_Base_SetConfig+0x12c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0xf8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <TIM_Base_SetConfig+0x130>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d103      	bne.n	8004584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	615a      	str	r2, [r3, #20]
}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40000c00 	.word	0x40000c00
 80045a8:	40010400 	.word	0x40010400
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40014400 	.word	0x40014400
 80045b4:	40014800 	.word	0x40014800

080045b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f023 0201 	bic.w	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f023 030a 	bic.w	r3, r3, #10
 80045f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	621a      	str	r2, [r3, #32]
}
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004616:	b480      	push	{r7}
 8004618:	b087      	sub	sp, #28
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f023 0210 	bic.w	r2, r3, #16
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	031b      	lsls	r3, r3, #12
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <TIM_ITRx_SetConfig+0x38>)
 800468c:	4013      	ands	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	f043 0307 	orr.w	r3, r3, #7
 800469a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	609a      	str	r2, [r3, #8]
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	ffcfff8f 	.word	0xffcfff8f

080046b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4313      	orrs	r3, r2
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	609a      	str	r2, [r3, #8]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e06d      	b.n	80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a30      	ldr	r2, [pc, #192]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2f      	ldr	r2, [pc, #188]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d108      	bne.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004746:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004758:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477e:	d01d      	beq.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a16      	ldr	r2, [pc, #88]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d10c      	bne.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	40010000 	.word	0x40010000
 80047f8:	40010400 	.word	0x40010400
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40001800 	.word	0x40001800
 800480c:	40014000 	.word	0x40014000

08004810 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8004810:	b590      	push	{r4, r7, lr}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af02      	add	r7, sp, #8
 8004816:	4604      	mov	r4, r0
 8004818:	4608      	mov	r0, r1
 800481a:	4611      	mov	r1, r2
 800481c:	461a      	mov	r2, r3
 800481e:	4623      	mov	r3, r4
 8004820:	71fb      	strb	r3, [r7, #7]
 8004822:	4603      	mov	r3, r0
 8004824:	71bb      	strb	r3, [r7, #6]
 8004826:	460b      	mov	r3, r1
 8004828:	717b      	strb	r3, [r7, #5]
 800482a:	4613      	mov	r3, r2
 800482c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	2b1f      	cmp	r3, #31
 8004836:	d802      	bhi.n	800483e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	71fb      	strb	r3, [r7, #7]
 800483c:	e002      	b.n	8004844 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800483e:	7dfb      	ldrb	r3, [r7, #23]
 8004840:	3b20      	subs	r3, #32
 8004842:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004844:	2300      	movs	r3, #0
 8004846:	753b      	strb	r3, [r7, #20]
 8004848:	e012      	b.n	8004870 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800484a:	7dfa      	ldrb	r2, [r7, #23]
 800484c:	7d38      	ldrb	r0, [r7, #20]
 800484e:	7d39      	ldrb	r1, [r7, #20]
 8004850:	4c3b      	ldr	r4, [pc, #236]	; (8004940 <ILI9341_Draw_Char+0x130>)
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4423      	add	r3, r4
 800485c:	4403      	add	r3, r0
 800485e:	781a      	ldrb	r2, [r3, #0]
 8004860:	f101 0318 	add.w	r3, r1, #24
 8004864:	443b      	add	r3, r7
 8004866:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800486a:	7d3b      	ldrb	r3, [r7, #20]
 800486c:	3301      	adds	r3, #1
 800486e:	753b      	strb	r3, [r7, #20]
 8004870:	7d3b      	ldrb	r3, [r7, #20]
 8004872:	2b05      	cmp	r3, #5
 8004874:	d9e9      	bls.n	800484a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8004876:	79bb      	ldrb	r3, [r7, #6]
 8004878:	b298      	uxth	r0, r3
 800487a:	797b      	ldrb	r3, [r7, #5]
 800487c:	b299      	uxth	r1, r3
 800487e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004880:	461a      	mov	r2, r3
 8004882:	0052      	lsls	r2, r2, #1
 8004884:	4413      	add	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	b29c      	uxth	r4, r3
 8004890:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	4623      	mov	r3, r4
 8004896:	f000 fc49 	bl	800512c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800489a:	2300      	movs	r3, #0
 800489c:	757b      	strb	r3, [r7, #21]
 800489e:	e047      	b.n	8004930 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80048a0:	2300      	movs	r3, #0
 80048a2:	75bb      	strb	r3, [r7, #22]
 80048a4:	e03e      	b.n	8004924 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 80048a6:	7d7b      	ldrb	r3, [r7, #21]
 80048a8:	3318      	adds	r3, #24
 80048aa:	443b      	add	r3, r7
 80048ac:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80048b0:	461a      	mov	r2, r3
 80048b2:	7dbb      	ldrb	r3, [r7, #22]
 80048b4:	fa42 f303 	asr.w	r3, r2, r3
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02e      	beq.n	800491e <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 80048c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d110      	bne.n	80048e8 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80048c6:	79bb      	ldrb	r3, [r7, #6]
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	7d7b      	ldrb	r3, [r7, #21]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	b298      	uxth	r0, r3
 80048d2:	797b      	ldrb	r3, [r7, #5]
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	7dbb      	ldrb	r3, [r7, #22]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	4413      	add	r3, r2
 80048dc:	b29b      	uxth	r3, r3
 80048de:	887a      	ldrh	r2, [r7, #2]
 80048e0:	4619      	mov	r1, r3
 80048e2:	f000 fb59 	bl	8004f98 <ILI9341_Draw_Pixel>
 80048e6:	e01a      	b.n	800491e <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80048e8:	79bb      	ldrb	r3, [r7, #6]
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	7d7b      	ldrb	r3, [r7, #21]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80048f2:	fb11 f303 	smulbb	r3, r1, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	b298      	uxth	r0, r3
 80048fc:	797b      	ldrb	r3, [r7, #5]
 80048fe:	b29a      	uxth	r2, r3
 8004900:	7dbb      	ldrb	r3, [r7, #22]
 8004902:	b29b      	uxth	r3, r3
 8004904:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004906:	fb11 f303 	smulbb	r3, r1, r3
 800490a:	b29b      	uxth	r3, r3
 800490c:	4413      	add	r3, r2
 800490e:	b299      	uxth	r1, r3
 8004910:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8004912:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	4623      	mov	r3, r4
 800491a:	f000 fc07 	bl	800512c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800491e:	7dbb      	ldrb	r3, [r7, #22]
 8004920:	3301      	adds	r3, #1
 8004922:	75bb      	strb	r3, [r7, #22]
 8004924:	7dbb      	ldrb	r3, [r7, #22]
 8004926:	2b07      	cmp	r3, #7
 8004928:	d9bd      	bls.n	80048a6 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800492a:	7d7b      	ldrb	r3, [r7, #21]
 800492c:	3301      	adds	r3, #1
 800492e:	757b      	strb	r3, [r7, #21]
 8004930:	7d7b      	ldrb	r3, [r7, #21]
 8004932:	2b05      	cmp	r3, #5
 8004934:	d9b4      	bls.n	80048a0 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	bd90      	pop	{r4, r7, pc}
 8004940:	08005b80 	.word	0x08005b80

08004944 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b085      	sub	sp, #20
 8004948:	af02      	add	r7, sp, #8
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	4608      	mov	r0, r1
 800494e:	4611      	mov	r1, r2
 8004950:	461a      	mov	r2, r3
 8004952:	4603      	mov	r3, r0
 8004954:	70fb      	strb	r3, [r7, #3]
 8004956:	460b      	mov	r3, r1
 8004958:	70bb      	strb	r3, [r7, #2]
 800495a:	4613      	mov	r3, r2
 800495c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 800495e:	e017      	b.n	8004990 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	7818      	ldrb	r0, [r3, #0]
 8004968:	883c      	ldrh	r4, [r7, #0]
 800496a:	78ba      	ldrb	r2, [r7, #2]
 800496c:	78f9      	ldrb	r1, [r7, #3]
 800496e:	8bbb      	ldrh	r3, [r7, #28]
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	8b3b      	ldrh	r3, [r7, #24]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	4623      	mov	r3, r4
 8004978:	f7ff ff4a 	bl	8004810 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800497c:	8b3b      	ldrh	r3, [r7, #24]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	0052      	lsls	r2, r2, #1
 8004984:	4413      	add	r3, r2
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	b2da      	uxtb	r2, r3
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	4413      	add	r3, r2
 800498e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e3      	bne.n	8004960 <ILI9341_Draw_Text+0x1c>
    }
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd90      	pop	{r4, r7, pc}
	...

080049a4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
MX_SPI3_Init();																							//SPI INIT
 80049a8:	f7fb ff52 	bl	8000850 <MX_SPI3_Init>
MX_GPIO_Init();																							//GPIO INIT
 80049ac:	f7fb fd7e 	bl	80004ac <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80049b0:	2200      	movs	r2, #0
 80049b2:	2101      	movs	r1, #1
 80049b4:	4802      	ldr	r0, [pc, #8]	; (80049c0 <ILI9341_SPI_Init+0x1c>)
 80049b6:	f7fc fca1 	bl	80012fc <HAL_GPIO_WritePin>
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	58020400 	.word	0x58020400

080049c4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80049ce:	1df9      	adds	r1, r7, #7
 80049d0:	2301      	movs	r3, #1
 80049d2:	2201      	movs	r2, #1
 80049d4:	4803      	ldr	r0, [pc, #12]	; (80049e4 <ILI9341_SPI_Send+0x20>)
 80049d6:	f7ff f921 	bl	8003c1c <HAL_SPI_Transmit>
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	24000094 	.word	0x24000094

080049e8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80049f2:	2200      	movs	r2, #0
 80049f4:	2101      	movs	r1, #1
 80049f6:	480a      	ldr	r0, [pc, #40]	; (8004a20 <ILI9341_Write_Command+0x38>)
 80049f8:	f7fc fc80 	bl	80012fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80049fc:	2200      	movs	r2, #0
 80049fe:	2101      	movs	r1, #1
 8004a00:	4808      	ldr	r0, [pc, #32]	; (8004a24 <ILI9341_Write_Command+0x3c>)
 8004a02:	f7fc fc7b 	bl	80012fc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ffdb 	bl	80049c4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8004a0e:	2201      	movs	r2, #1
 8004a10:	2101      	movs	r1, #1
 8004a12:	4803      	ldr	r0, [pc, #12]	; (8004a20 <ILI9341_Write_Command+0x38>)
 8004a14:	f7fc fc72 	bl	80012fc <HAL_GPIO_WritePin>
}
 8004a18:	bf00      	nop
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	58020400 	.word	0x58020400
 8004a24:	58021000 	.word	0x58021000

08004a28 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004a32:	2201      	movs	r2, #1
 8004a34:	2101      	movs	r1, #1
 8004a36:	480a      	ldr	r0, [pc, #40]	; (8004a60 <ILI9341_Write_Data+0x38>)
 8004a38:	f7fc fc60 	bl	80012fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2101      	movs	r1, #1
 8004a40:	4808      	ldr	r0, [pc, #32]	; (8004a64 <ILI9341_Write_Data+0x3c>)
 8004a42:	f7fc fc5b 	bl	80012fc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff ffbb 	bl	80049c4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004a4e:	2201      	movs	r2, #1
 8004a50:	2101      	movs	r1, #1
 8004a52:	4804      	ldr	r0, [pc, #16]	; (8004a64 <ILI9341_Write_Data+0x3c>)
 8004a54:	f7fc fc52 	bl	80012fc <HAL_GPIO_WritePin>
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	58021000 	.word	0x58021000
 8004a64:	58020400 	.word	0x58020400

08004a68 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4604      	mov	r4, r0
 8004a70:	4608      	mov	r0, r1
 8004a72:	4611      	mov	r1, r2
 8004a74:	461a      	mov	r2, r3
 8004a76:	4623      	mov	r3, r4
 8004a78:	80fb      	strh	r3, [r7, #6]
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	80bb      	strh	r3, [r7, #4]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	807b      	strh	r3, [r7, #2]
 8004a82:	4613      	mov	r3, r2
 8004a84:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8004a86:	202a      	movs	r0, #42	; 0x2a
 8004a88:	f7ff ffae 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ffc7 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff ffc2 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8004aa4:	887b      	ldrh	r3, [r7, #2]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff ffbb 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8004ab2:	887b      	ldrh	r3, [r7, #2]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ffb6 	bl	8004a28 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8004abc:	202b      	movs	r0, #43	; 0x2b
 8004abe:	f7ff ff93 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8004ac2:	88bb      	ldrh	r3, [r7, #4]
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff ffac 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8004ad0:	88bb      	ldrh	r3, [r7, #4]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ffa7 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8004ada:	883b      	ldrh	r3, [r7, #0]
 8004adc:	0a1b      	lsrs	r3, r3, #8
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff ffa0 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8004ae8:	883b      	ldrh	r3, [r7, #0]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ff9b 	bl	8004a28 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8004af2:	202c      	movs	r0, #44	; 0x2c
 8004af4:	f7ff ff78 	bl	80049e8 <ILI9341_Write_Command>
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}

08004b00 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8004b04:	2200      	movs	r2, #0
 8004b06:	2101      	movs	r1, #1
 8004b08:	480a      	ldr	r0, [pc, #40]	; (8004b34 <ILI9341_Reset+0x34>)
 8004b0a:	f7fc fbf7 	bl	80012fc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8004b0e:	20c8      	movs	r0, #200	; 0xc8
 8004b10:	f7fc f930 	bl	8000d74 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004b14:	2200      	movs	r2, #0
 8004b16:	2101      	movs	r1, #1
 8004b18:	4807      	ldr	r0, [pc, #28]	; (8004b38 <ILI9341_Reset+0x38>)
 8004b1a:	f7fc fbef 	bl	80012fc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8004b1e:	20c8      	movs	r0, #200	; 0xc8
 8004b20:	f7fc f928 	bl	8000d74 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8004b24:	2201      	movs	r2, #1
 8004b26:	2101      	movs	r1, #1
 8004b28:	4802      	ldr	r0, [pc, #8]	; (8004b34 <ILI9341_Reset+0x34>)
 8004b2a:	f7fc fbe7 	bl	80012fc <HAL_GPIO_WritePin>
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	58020000 	.word	0x58020000
 8004b38:	58020400 	.word	0x58020400

08004b3c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8004b4a:	2036      	movs	r0, #54	; 0x36
 8004b4c:	f7ff ff4c 	bl	80049e8 <ILI9341_Write_Command>
HAL_Delay(1);
 8004b50:	2001      	movs	r0, #1
 8004b52:	f7fc f90f 	bl	8000d74 <HAL_Delay>
	
switch(screen_rotation) 
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d837      	bhi.n	8004bcc <ILI9341_Set_Rotation+0x90>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <ILI9341_Set_Rotation+0x28>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b75 	.word	0x08004b75
 8004b68:	08004b8b 	.word	0x08004b8b
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004bb7 	.word	0x08004bb7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8004b74:	2048      	movs	r0, #72	; 0x48
 8004b76:	f7ff ff57 	bl	8004a28 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8004b7a:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <ILI9341_Set_Rotation+0x9c>)
 8004b7c:	22f0      	movs	r2, #240	; 0xf0
 8004b7e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004b80:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <ILI9341_Set_Rotation+0xa0>)
 8004b82:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b86:	801a      	strh	r2, [r3, #0]
			break;
 8004b88:	e021      	b.n	8004bce <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8004b8a:	2028      	movs	r0, #40	; 0x28
 8004b8c:	f7ff ff4c 	bl	8004a28 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8004b90:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <ILI9341_Set_Rotation+0x9c>)
 8004b92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b96:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004b98:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <ILI9341_Set_Rotation+0xa0>)
 8004b9a:	22f0      	movs	r2, #240	; 0xf0
 8004b9c:	801a      	strh	r2, [r3, #0]
			break;
 8004b9e:	e016      	b.n	8004bce <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8004ba0:	2088      	movs	r0, #136	; 0x88
 8004ba2:	f7ff ff41 	bl	8004a28 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <ILI9341_Set_Rotation+0x9c>)
 8004ba8:	22f0      	movs	r2, #240	; 0xf0
 8004baa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <ILI9341_Set_Rotation+0xa0>)
 8004bae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bb2:	801a      	strh	r2, [r3, #0]
			break;
 8004bb4:	e00b      	b.n	8004bce <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8004bb6:	20e8      	movs	r0, #232	; 0xe8
 8004bb8:	f7ff ff36 	bl	8004a28 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <ILI9341_Set_Rotation+0x9c>)
 8004bbe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bc2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <ILI9341_Set_Rotation+0xa0>)
 8004bc6:	22f0      	movs	r2, #240	; 0xf0
 8004bc8:	801a      	strh	r2, [r3, #0]
			break;
 8004bca:	e000      	b.n	8004bce <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8004bcc:	bf00      	nop
	}
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	24000010 	.word	0x24000010
 8004bdc:	2400000e 	.word	0x2400000e

08004be0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004be4:	2201      	movs	r2, #1
 8004be6:	2101      	movs	r1, #1
 8004be8:	4802      	ldr	r0, [pc, #8]	; (8004bf4 <ILI9341_Enable+0x14>)
 8004bea:	f7fc fb87 	bl	80012fc <HAL_GPIO_WritePin>
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	58020000 	.word	0x58020000

08004bf8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8004bfc:	f7ff fff0 	bl	8004be0 <ILI9341_Enable>
ILI9341_SPI_Init();
 8004c00:	f7ff fed0 	bl	80049a4 <ILI9341_SPI_Init>
ILI9341_Reset();
 8004c04:	f7ff ff7c 	bl	8004b00 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8004c08:	2001      	movs	r0, #1
 8004c0a:	f7ff feed 	bl	80049e8 <ILI9341_Write_Command>
HAL_Delay(1000);
 8004c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c12:	f7fc f8af 	bl	8000d74 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8004c16:	20cb      	movs	r0, #203	; 0xcb
 8004c18:	f7ff fee6 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8004c1c:	2039      	movs	r0, #57	; 0x39
 8004c1e:	f7ff ff03 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8004c22:	202c      	movs	r0, #44	; 0x2c
 8004c24:	f7ff ff00 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f7ff fefd 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8004c2e:	2034      	movs	r0, #52	; 0x34
 8004c30:	f7ff fefa 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8004c34:	2002      	movs	r0, #2
 8004c36:	f7ff fef7 	bl	8004a28 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8004c3a:	20cf      	movs	r0, #207	; 0xcf
 8004c3c:	f7ff fed4 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004c40:	2000      	movs	r0, #0
 8004c42:	f7ff fef1 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8004c46:	20c1      	movs	r0, #193	; 0xc1
 8004c48:	f7ff feee 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8004c4c:	2030      	movs	r0, #48	; 0x30
 8004c4e:	f7ff feeb 	bl	8004a28 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8004c52:	20e8      	movs	r0, #232	; 0xe8
 8004c54:	f7ff fec8 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8004c58:	2085      	movs	r0, #133	; 0x85
 8004c5a:	f7ff fee5 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004c5e:	2000      	movs	r0, #0
 8004c60:	f7ff fee2 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8004c64:	2078      	movs	r0, #120	; 0x78
 8004c66:	f7ff fedf 	bl	8004a28 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8004c6a:	20ea      	movs	r0, #234	; 0xea
 8004c6c:	f7ff febc 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7ff fed9 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004c76:	2000      	movs	r0, #0
 8004c78:	f7ff fed6 	bl	8004a28 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8004c7c:	20ed      	movs	r0, #237	; 0xed
 8004c7e:	f7ff feb3 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8004c82:	2064      	movs	r0, #100	; 0x64
 8004c84:	f7ff fed0 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004c88:	2003      	movs	r0, #3
 8004c8a:	f7ff fecd 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8004c8e:	2012      	movs	r0, #18
 8004c90:	f7ff feca 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8004c94:	2081      	movs	r0, #129	; 0x81
 8004c96:	f7ff fec7 	bl	8004a28 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8004c9a:	20f7      	movs	r0, #247	; 0xf7
 8004c9c:	f7ff fea4 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8004ca0:	2020      	movs	r0, #32
 8004ca2:	f7ff fec1 	bl	8004a28 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8004ca6:	20c0      	movs	r0, #192	; 0xc0
 8004ca8:	f7ff fe9e 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8004cac:	2023      	movs	r0, #35	; 0x23
 8004cae:	f7ff febb 	bl	8004a28 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8004cb2:	20c1      	movs	r0, #193	; 0xc1
 8004cb4:	f7ff fe98 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8004cb8:	2010      	movs	r0, #16
 8004cba:	f7ff feb5 	bl	8004a28 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8004cbe:	20c5      	movs	r0, #197	; 0xc5
 8004cc0:	f7ff fe92 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8004cc4:	203e      	movs	r0, #62	; 0x3e
 8004cc6:	f7ff feaf 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8004cca:	2028      	movs	r0, #40	; 0x28
 8004ccc:	f7ff feac 	bl	8004a28 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8004cd0:	20c7      	movs	r0, #199	; 0xc7
 8004cd2:	f7ff fe89 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8004cd6:	2086      	movs	r0, #134	; 0x86
 8004cd8:	f7ff fea6 	bl	8004a28 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8004cdc:	2036      	movs	r0, #54	; 0x36
 8004cde:	f7ff fe83 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8004ce2:	2048      	movs	r0, #72	; 0x48
 8004ce4:	f7ff fea0 	bl	8004a28 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8004ce8:	203a      	movs	r0, #58	; 0x3a
 8004cea:	f7ff fe7d 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8004cee:	2055      	movs	r0, #85	; 0x55
 8004cf0:	f7ff fe9a 	bl	8004a28 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8004cf4:	20b1      	movs	r0, #177	; 0xb1
 8004cf6:	f7ff fe77 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f7ff fe94 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8004d00:	2018      	movs	r0, #24
 8004d02:	f7ff fe91 	bl	8004a28 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8004d06:	20b6      	movs	r0, #182	; 0xb6
 8004d08:	f7ff fe6e 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8004d0c:	2008      	movs	r0, #8
 8004d0e:	f7ff fe8b 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8004d12:	2082      	movs	r0, #130	; 0x82
 8004d14:	f7ff fe88 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8004d18:	2027      	movs	r0, #39	; 0x27
 8004d1a:	f7ff fe85 	bl	8004a28 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8004d1e:	20f2      	movs	r0, #242	; 0xf2
 8004d20:	f7ff fe62 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004d24:	2000      	movs	r0, #0
 8004d26:	f7ff fe7f 	bl	8004a28 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8004d2a:	2026      	movs	r0, #38	; 0x26
 8004d2c:	f7ff fe5c 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8004d30:	2001      	movs	r0, #1
 8004d32:	f7ff fe79 	bl	8004a28 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8004d36:	20e0      	movs	r0, #224	; 0xe0
 8004d38:	f7ff fe56 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8004d3c:	200f      	movs	r0, #15
 8004d3e:	f7ff fe73 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004d42:	2031      	movs	r0, #49	; 0x31
 8004d44:	f7ff fe70 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8004d48:	202b      	movs	r0, #43	; 0x2b
 8004d4a:	f7ff fe6d 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8004d4e:	200c      	movs	r0, #12
 8004d50:	f7ff fe6a 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004d54:	200e      	movs	r0, #14
 8004d56:	f7ff fe67 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8004d5a:	2008      	movs	r0, #8
 8004d5c:	f7ff fe64 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8004d60:	204e      	movs	r0, #78	; 0x4e
 8004d62:	f7ff fe61 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8004d66:	20f1      	movs	r0, #241	; 0xf1
 8004d68:	f7ff fe5e 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8004d6c:	2037      	movs	r0, #55	; 0x37
 8004d6e:	f7ff fe5b 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8004d72:	2007      	movs	r0, #7
 8004d74:	f7ff fe58 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8004d78:	2010      	movs	r0, #16
 8004d7a:	f7ff fe55 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004d7e:	2003      	movs	r0, #3
 8004d80:	f7ff fe52 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004d84:	200e      	movs	r0, #14
 8004d86:	f7ff fe4f 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8004d8a:	2009      	movs	r0, #9
 8004d8c:	f7ff fe4c 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004d90:	2000      	movs	r0, #0
 8004d92:	f7ff fe49 	bl	8004a28 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8004d96:	20e1      	movs	r0, #225	; 0xe1
 8004d98:	f7ff fe26 	bl	80049e8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f7ff fe43 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004da2:	200e      	movs	r0, #14
 8004da4:	f7ff fe40 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8004da8:	2014      	movs	r0, #20
 8004daa:	f7ff fe3d 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004dae:	2003      	movs	r0, #3
 8004db0:	f7ff fe3a 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8004db4:	2011      	movs	r0, #17
 8004db6:	f7ff fe37 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8004dba:	2007      	movs	r0, #7
 8004dbc:	f7ff fe34 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004dc0:	2031      	movs	r0, #49	; 0x31
 8004dc2:	f7ff fe31 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8004dc6:	20c1      	movs	r0, #193	; 0xc1
 8004dc8:	f7ff fe2e 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8004dcc:	2048      	movs	r0, #72	; 0x48
 8004dce:	f7ff fe2b 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8004dd2:	2008      	movs	r0, #8
 8004dd4:	f7ff fe28 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8004dd8:	200f      	movs	r0, #15
 8004dda:	f7ff fe25 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8004dde:	200c      	movs	r0, #12
 8004de0:	f7ff fe22 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004de4:	2031      	movs	r0, #49	; 0x31
 8004de6:	f7ff fe1f 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8004dea:	2036      	movs	r0, #54	; 0x36
 8004dec:	f7ff fe1c 	bl	8004a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8004df0:	200f      	movs	r0, #15
 8004df2:	f7ff fe19 	bl	8004a28 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8004df6:	2011      	movs	r0, #17
 8004df8:	f7ff fdf6 	bl	80049e8 <ILI9341_Write_Command>
HAL_Delay(120);
 8004dfc:	2078      	movs	r0, #120	; 0x78
 8004dfe:	f7fb ffb9 	bl	8000d74 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8004e02:	2029      	movs	r0, #41	; 0x29
 8004e04:	f7ff fdf0 	bl	80049e8 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f7ff fe97 	bl	8004b3c <ILI9341_Set_Rotation>
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8004e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e18:	b08d      	sub	sp, #52	; 0x34
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	6039      	str	r1, [r7, #0]
 8004e20:	80fb      	strh	r3, [r7, #6]
 8004e22:	466b      	mov	r3, sp
 8004e24:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e32:	d202      	bcs.n	8004e3a <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
 8004e38:	e002      	b.n	8004e40 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8004e3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004e40:	2201      	movs	r2, #1
 8004e42:	2101      	movs	r1, #1
 8004e44:	483e      	ldr	r0, [pc, #248]	; (8004f40 <ILI9341_Draw_Colour_Burst+0x12c>)
 8004e46:	f7fc fa59 	bl	80012fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	483d      	ldr	r0, [pc, #244]	; (8004f44 <ILI9341_Draw_Colour_Burst+0x130>)
 8004e50:	f7fc fa54 	bl	80012fc <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8004e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e60:	460b      	mov	r3, r1
 8004e62:	3b01      	subs	r3, #1
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	2300      	movs	r3, #0
 8004e68:	4688      	mov	r8, r1
 8004e6a:	4699      	mov	r9, r3
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e80:	2300      	movs	r3, #0
 8004e82:	460c      	mov	r4, r1
 8004e84:	461d      	mov	r5, r3
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	00eb      	lsls	r3, r5, #3
 8004e90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e94:	00e2      	lsls	r2, r4, #3
 8004e96:	1dcb      	adds	r3, r1, #7
 8004e98:	08db      	lsrs	r3, r3, #3
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	ebad 0d03 	sub.w	sp, sp, r3
 8004ea0:	466b      	mov	r3, sp
 8004ea2:	3300      	adds	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eaa:	e00e      	b.n	8004eca <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004eb6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	3301      	adds	r3, #1
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	b2d1      	uxtb	r1, r2
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d3ec      	bcc.n	8004eac <ILI9341_Draw_Colour_Burst+0x98>
	}

uint32_t Sending_Size = Size*2;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eec:	fb01 f202 	mul.w	r2, r1, r2
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d010      	beq.n	8004f1c <ILI9341_Draw_Colour_Burst+0x108>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004efa:	2300      	movs	r3, #0
 8004efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004efe:	e009      	b.n	8004f14 <ILI9341_Draw_Colour_Burst+0x100>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	230a      	movs	r3, #10
 8004f06:	69b9      	ldr	r1, [r7, #24]
 8004f08:	480f      	ldr	r0, [pc, #60]	; (8004f48 <ILI9341_Draw_Colour_Burst+0x134>)
 8004f0a:	f7fe fe87 	bl	8003c1c <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	3301      	adds	r3, #1
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d3f1      	bcc.n	8004f00 <ILI9341_Draw_Colour_Burst+0xec>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	230a      	movs	r3, #10
 8004f22:	69b9      	ldr	r1, [r7, #24]
 8004f24:	4808      	ldr	r0, [pc, #32]	; (8004f48 <ILI9341_Draw_Colour_Burst+0x134>)
 8004f26:	f7fe fe79 	bl	8003c1c <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	4805      	ldr	r0, [pc, #20]	; (8004f44 <ILI9341_Draw_Colour_Burst+0x130>)
 8004f30:	f7fc f9e4 	bl	80012fc <HAL_GPIO_WritePin>
 8004f34:	46b5      	mov	sp, r6
}
 8004f36:	bf00      	nop
 8004f38:	3734      	adds	r7, #52	; 0x34
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f40:	58021000 	.word	0x58021000
 8004f44:	58020400 	.word	0x58020400
 8004f48:	24000094 	.word	0x24000094

08004f4c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8004f56:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <ILI9341_Fill_Screen+0x44>)
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <ILI9341_Fill_Screen+0x48>)
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2100      	movs	r1, #0
 8004f64:	2000      	movs	r0, #0
 8004f66:	f7ff fd7f 	bl	8004a68 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <ILI9341_Fill_Screen+0x44>)
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <ILI9341_Fill_Screen+0x48>)
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff ff46 	bl	8004e14 <ILI9341_Draw_Colour_Burst>
}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	24000010 	.word	0x24000010
 8004f94:	2400000e 	.word	0x2400000e

08004f98 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	80fb      	strh	r3, [r7, #6]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	80bb      	strh	r3, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8004faa:	4b5b      	ldr	r3, [pc, #364]	; (8005118 <ILI9341_Draw_Pixel+0x180>)
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	f080 80ac 	bcs.w	8005110 <ILI9341_Draw_Pixel+0x178>
 8004fb8:	4b58      	ldr	r3, [pc, #352]	; (800511c <ILI9341_Draw_Pixel+0x184>)
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	88ba      	ldrh	r2, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	f080 80a5 	bcs.w	8005110 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2101      	movs	r1, #1
 8004fca:	4855      	ldr	r0, [pc, #340]	; (8005120 <ILI9341_Draw_Pixel+0x188>)
 8004fcc:	f7fc f996 	bl	80012fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	4853      	ldr	r0, [pc, #332]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 8004fd6:	f7fc f991 	bl	80012fc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8004fda:	202a      	movs	r0, #42	; 0x2a
 8004fdc:	f7ff fcf2 	bl	80049c4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	484e      	ldr	r0, [pc, #312]	; (8005120 <ILI9341_Draw_Pixel+0x188>)
 8004fe6:	f7fc f989 	bl	80012fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8004fea:	2201      	movs	r2, #1
 8004fec:	2101      	movs	r1, #1
 8004fee:	484d      	ldr	r0, [pc, #308]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 8004ff0:	f7fc f984 	bl	80012fc <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	484a      	ldr	r0, [pc, #296]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 8004ffa:	f7fc f97f 	bl	80012fc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	0a1b      	lsrs	r3, r3, #8
 8005002:	b29b      	uxth	r3, r3
 8005004:	b2db      	uxtb	r3, r3
 8005006:	753b      	strb	r3, [r7, #20]
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	757b      	strb	r3, [r7, #21]
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	3301      	adds	r3, #1
 8005012:	121b      	asrs	r3, r3, #8
 8005014:	b2db      	uxtb	r3, r3
 8005016:	75bb      	strb	r3, [r7, #22]
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	3301      	adds	r3, #1
 800501e:	b2db      	uxtb	r3, r3
 8005020:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8005022:	f107 0114 	add.w	r1, r7, #20
 8005026:	2301      	movs	r3, #1
 8005028:	2204      	movs	r2, #4
 800502a:	483f      	ldr	r0, [pc, #252]	; (8005128 <ILI9341_Draw_Pixel+0x190>)
 800502c:	f7fe fdf6 	bl	8003c1c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005030:	2201      	movs	r2, #1
 8005032:	2101      	movs	r1, #1
 8005034:	483b      	ldr	r0, [pc, #236]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 8005036:	f7fc f961 	bl	80012fc <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800503a:	2200      	movs	r2, #0
 800503c:	2101      	movs	r1, #1
 800503e:	4838      	ldr	r0, [pc, #224]	; (8005120 <ILI9341_Draw_Pixel+0x188>)
 8005040:	f7fc f95c 	bl	80012fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005044:	2200      	movs	r2, #0
 8005046:	2101      	movs	r1, #1
 8005048:	4836      	ldr	r0, [pc, #216]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 800504a:	f7fc f957 	bl	80012fc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800504e:	202b      	movs	r0, #43	; 0x2b
 8005050:	f7ff fcb8 	bl	80049c4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8005054:	2201      	movs	r2, #1
 8005056:	2101      	movs	r1, #1
 8005058:	4831      	ldr	r0, [pc, #196]	; (8005120 <ILI9341_Draw_Pixel+0x188>)
 800505a:	f7fc f94f 	bl	80012fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800505e:	2201      	movs	r2, #1
 8005060:	2101      	movs	r1, #1
 8005062:	4830      	ldr	r0, [pc, #192]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 8005064:	f7fc f94a 	bl	80012fc <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005068:	2200      	movs	r2, #0
 800506a:	2101      	movs	r1, #1
 800506c:	482d      	ldr	r0, [pc, #180]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 800506e:	f7fc f945 	bl	80012fc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8005072:	88bb      	ldrh	r3, [r7, #4]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	b29b      	uxth	r3, r3
 8005078:	b2db      	uxtb	r3, r3
 800507a:	743b      	strb	r3, [r7, #16]
 800507c:	88bb      	ldrh	r3, [r7, #4]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	747b      	strb	r3, [r7, #17]
 8005082:	88bb      	ldrh	r3, [r7, #4]
 8005084:	3301      	adds	r3, #1
 8005086:	121b      	asrs	r3, r3, #8
 8005088:	b2db      	uxtb	r3, r3
 800508a:	74bb      	strb	r3, [r7, #18]
 800508c:	88bb      	ldrh	r3, [r7, #4]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	3301      	adds	r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8005096:	f107 0110 	add.w	r1, r7, #16
 800509a:	2301      	movs	r3, #1
 800509c:	2204      	movs	r2, #4
 800509e:	4822      	ldr	r0, [pc, #136]	; (8005128 <ILI9341_Draw_Pixel+0x190>)
 80050a0:	f7fe fdbc 	bl	8003c1c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80050a4:	2201      	movs	r2, #1
 80050a6:	2101      	movs	r1, #1
 80050a8:	481e      	ldr	r0, [pc, #120]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 80050aa:	f7fc f927 	bl	80012fc <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80050ae:	2200      	movs	r2, #0
 80050b0:	2101      	movs	r1, #1
 80050b2:	481b      	ldr	r0, [pc, #108]	; (8005120 <ILI9341_Draw_Pixel+0x188>)
 80050b4:	f7fc f922 	bl	80012fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80050b8:	2200      	movs	r2, #0
 80050ba:	2101      	movs	r1, #1
 80050bc:	4819      	ldr	r0, [pc, #100]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 80050be:	f7fc f91d 	bl	80012fc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80050c2:	202c      	movs	r0, #44	; 0x2c
 80050c4:	f7ff fc7e 	bl	80049c4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80050c8:	2201      	movs	r2, #1
 80050ca:	2101      	movs	r1, #1
 80050cc:	4814      	ldr	r0, [pc, #80]	; (8005120 <ILI9341_Draw_Pixel+0x188>)
 80050ce:	f7fc f915 	bl	80012fc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80050d2:	2201      	movs	r2, #1
 80050d4:	2101      	movs	r1, #1
 80050d6:	4813      	ldr	r0, [pc, #76]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 80050d8:	f7fc f910 	bl	80012fc <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80050dc:	2200      	movs	r2, #0
 80050de:	2101      	movs	r1, #1
 80050e0:	4810      	ldr	r0, [pc, #64]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 80050e2:	f7fc f90b 	bl	80012fc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80050e6:	887b      	ldrh	r3, [r7, #2]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	733b      	strb	r3, [r7, #12]
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80050f6:	f107 010c 	add.w	r1, r7, #12
 80050fa:	2301      	movs	r3, #1
 80050fc:	2202      	movs	r2, #2
 80050fe:	480a      	ldr	r0, [pc, #40]	; (8005128 <ILI9341_Draw_Pixel+0x190>)
 8005100:	f7fe fd8c 	bl	8003c1c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005104:	2201      	movs	r2, #1
 8005106:	2101      	movs	r1, #1
 8005108:	4806      	ldr	r0, [pc, #24]	; (8005124 <ILI9341_Draw_Pixel+0x18c>)
 800510a:	f7fc f8f7 	bl	80012fc <HAL_GPIO_WritePin>
 800510e:	e000      	b.n	8005112 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005110:	bf00      	nop
	
}
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	24000010 	.word	0x24000010
 800511c:	2400000e 	.word	0x2400000e
 8005120:	58021000 	.word	0x58021000
 8005124:	58020400 	.word	0x58020400
 8005128:	24000094 	.word	0x24000094

0800512c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	4604      	mov	r4, r0
 8005134:	4608      	mov	r0, r1
 8005136:	4611      	mov	r1, r2
 8005138:	461a      	mov	r2, r3
 800513a:	4623      	mov	r3, r4
 800513c:	80fb      	strh	r3, [r7, #6]
 800513e:	4603      	mov	r3, r0
 8005140:	80bb      	strh	r3, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	807b      	strh	r3, [r7, #2]
 8005146:	4613      	mov	r3, r2
 8005148:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800514a:	4b24      	ldr	r3, [pc, #144]	; (80051dc <ILI9341_Draw_Rectangle+0xb0>)
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	88fa      	ldrh	r2, [r7, #6]
 8005152:	429a      	cmp	r2, r3
 8005154:	d23d      	bcs.n	80051d2 <ILI9341_Draw_Rectangle+0xa6>
 8005156:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <ILI9341_Draw_Rectangle+0xb4>)
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	b29b      	uxth	r3, r3
 800515c:	88ba      	ldrh	r2, [r7, #4]
 800515e:	429a      	cmp	r2, r3
 8005160:	d237      	bcs.n	80051d2 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	887b      	ldrh	r3, [r7, #2]
 8005166:	4413      	add	r3, r2
 8005168:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <ILI9341_Draw_Rectangle+0xb0>)
 800516a:	8812      	ldrh	r2, [r2, #0]
 800516c:	b292      	uxth	r2, r2
 800516e:	4293      	cmp	r3, r2
 8005170:	dd05      	ble.n	800517e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8005172:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <ILI9341_Draw_Rectangle+0xb0>)
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29a      	uxth	r2, r3
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800517e:	88ba      	ldrh	r2, [r7, #4]
 8005180:	883b      	ldrh	r3, [r7, #0]
 8005182:	4413      	add	r3, r2
 8005184:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <ILI9341_Draw_Rectangle+0xb4>)
 8005186:	8812      	ldrh	r2, [r2, #0]
 8005188:	b292      	uxth	r2, r2
 800518a:	4293      	cmp	r3, r2
 800518c:	dd05      	ble.n	800519a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <ILI9341_Draw_Rectangle+0xb4>)
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29a      	uxth	r2, r3
 8005194:	88bb      	ldrh	r3, [r7, #4]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800519a:	88fa      	ldrh	r2, [r7, #6]
 800519c:	887b      	ldrh	r3, [r7, #2]
 800519e:	4413      	add	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29c      	uxth	r4, r3
 80051a6:	88ba      	ldrh	r2, [r7, #4]
 80051a8:	883b      	ldrh	r3, [r7, #0]
 80051aa:	4413      	add	r3, r2
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	88b9      	ldrh	r1, [r7, #4]
 80051b4:	88f8      	ldrh	r0, [r7, #6]
 80051b6:	4622      	mov	r2, r4
 80051b8:	f7ff fc56 	bl	8004a68 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80051bc:	883b      	ldrh	r3, [r7, #0]
 80051be:	887a      	ldrh	r2, [r7, #2]
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	8b3b      	ldrh	r3, [r7, #24]
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff fe22 	bl	8004e14 <ILI9341_Draw_Colour_Burst>
 80051d0:	e000      	b.n	80051d4 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80051d2:	bf00      	nop
}
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd90      	pop	{r4, r7, pc}
 80051da:	bf00      	nop
 80051dc:	24000010 	.word	0x24000010
 80051e0:	2400000e 	.word	0x2400000e

080051e4 <__errno>:
 80051e4:	4b01      	ldr	r3, [pc, #4]	; (80051ec <__errno+0x8>)
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	24000014 	.word	0x24000014

080051f0 <__libc_init_array>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	4d0d      	ldr	r5, [pc, #52]	; (8005228 <__libc_init_array+0x38>)
 80051f4:	4c0d      	ldr	r4, [pc, #52]	; (800522c <__libc_init_array+0x3c>)
 80051f6:	1b64      	subs	r4, r4, r5
 80051f8:	10a4      	asrs	r4, r4, #2
 80051fa:	2600      	movs	r6, #0
 80051fc:	42a6      	cmp	r6, r4
 80051fe:	d109      	bne.n	8005214 <__libc_init_array+0x24>
 8005200:	4d0b      	ldr	r5, [pc, #44]	; (8005230 <__libc_init_array+0x40>)
 8005202:	4c0c      	ldr	r4, [pc, #48]	; (8005234 <__libc_init_array+0x44>)
 8005204:	f000 fc8e 	bl	8005b24 <_init>
 8005208:	1b64      	subs	r4, r4, r5
 800520a:	10a4      	asrs	r4, r4, #2
 800520c:	2600      	movs	r6, #0
 800520e:	42a6      	cmp	r6, r4
 8005210:	d105      	bne.n	800521e <__libc_init_array+0x2e>
 8005212:	bd70      	pop	{r4, r5, r6, pc}
 8005214:	f855 3b04 	ldr.w	r3, [r5], #4
 8005218:	4798      	blx	r3
 800521a:	3601      	adds	r6, #1
 800521c:	e7ee      	b.n	80051fc <__libc_init_array+0xc>
 800521e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005222:	4798      	blx	r3
 8005224:	3601      	adds	r6, #1
 8005226:	e7f2      	b.n	800520e <__libc_init_array+0x1e>
 8005228:	08005df4 	.word	0x08005df4
 800522c:	08005df4 	.word	0x08005df4
 8005230:	08005df4 	.word	0x08005df4
 8005234:	08005df8 	.word	0x08005df8

08005238 <memset>:
 8005238:	4402      	add	r2, r0
 800523a:	4603      	mov	r3, r0
 800523c:	4293      	cmp	r3, r2
 800523e:	d100      	bne.n	8005242 <memset+0xa>
 8005240:	4770      	bx	lr
 8005242:	f803 1b01 	strb.w	r1, [r3], #1
 8005246:	e7f9      	b.n	800523c <memset+0x4>

08005248 <siprintf>:
 8005248:	b40e      	push	{r1, r2, r3}
 800524a:	b500      	push	{lr}
 800524c:	b09c      	sub	sp, #112	; 0x70
 800524e:	ab1d      	add	r3, sp, #116	; 0x74
 8005250:	9002      	str	r0, [sp, #8]
 8005252:	9006      	str	r0, [sp, #24]
 8005254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005258:	4809      	ldr	r0, [pc, #36]	; (8005280 <siprintf+0x38>)
 800525a:	9107      	str	r1, [sp, #28]
 800525c:	9104      	str	r1, [sp, #16]
 800525e:	4909      	ldr	r1, [pc, #36]	; (8005284 <siprintf+0x3c>)
 8005260:	f853 2b04 	ldr.w	r2, [r3], #4
 8005264:	9105      	str	r1, [sp, #20]
 8005266:	6800      	ldr	r0, [r0, #0]
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	a902      	add	r1, sp, #8
 800526c:	f000 f868 	bl	8005340 <_svfiprintf_r>
 8005270:	9b02      	ldr	r3, [sp, #8]
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	b01c      	add	sp, #112	; 0x70
 8005278:	f85d eb04 	ldr.w	lr, [sp], #4
 800527c:	b003      	add	sp, #12
 800527e:	4770      	bx	lr
 8005280:	24000014 	.word	0x24000014
 8005284:	ffff0208 	.word	0xffff0208

08005288 <__ssputs_r>:
 8005288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	688e      	ldr	r6, [r1, #8]
 800528e:	429e      	cmp	r6, r3
 8005290:	4682      	mov	sl, r0
 8005292:	460c      	mov	r4, r1
 8005294:	4690      	mov	r8, r2
 8005296:	461f      	mov	r7, r3
 8005298:	d838      	bhi.n	800530c <__ssputs_r+0x84>
 800529a:	898a      	ldrh	r2, [r1, #12]
 800529c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052a0:	d032      	beq.n	8005308 <__ssputs_r+0x80>
 80052a2:	6825      	ldr	r5, [r4, #0]
 80052a4:	6909      	ldr	r1, [r1, #16]
 80052a6:	eba5 0901 	sub.w	r9, r5, r1
 80052aa:	6965      	ldr	r5, [r4, #20]
 80052ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052b4:	3301      	adds	r3, #1
 80052b6:	444b      	add	r3, r9
 80052b8:	106d      	asrs	r5, r5, #1
 80052ba:	429d      	cmp	r5, r3
 80052bc:	bf38      	it	cc
 80052be:	461d      	movcc	r5, r3
 80052c0:	0553      	lsls	r3, r2, #21
 80052c2:	d531      	bpl.n	8005328 <__ssputs_r+0xa0>
 80052c4:	4629      	mov	r1, r5
 80052c6:	f000 fb63 	bl	8005990 <_malloc_r>
 80052ca:	4606      	mov	r6, r0
 80052cc:	b950      	cbnz	r0, 80052e4 <__ssputs_r+0x5c>
 80052ce:	230c      	movs	r3, #12
 80052d0:	f8ca 3000 	str.w	r3, [sl]
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052da:	81a3      	strh	r3, [r4, #12]
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295
 80052e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e4:	6921      	ldr	r1, [r4, #16]
 80052e6:	464a      	mov	r2, r9
 80052e8:	f000 fabe 	bl	8005868 <memcpy>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	6126      	str	r6, [r4, #16]
 80052fa:	6165      	str	r5, [r4, #20]
 80052fc:	444e      	add	r6, r9
 80052fe:	eba5 0509 	sub.w	r5, r5, r9
 8005302:	6026      	str	r6, [r4, #0]
 8005304:	60a5      	str	r5, [r4, #8]
 8005306:	463e      	mov	r6, r7
 8005308:	42be      	cmp	r6, r7
 800530a:	d900      	bls.n	800530e <__ssputs_r+0x86>
 800530c:	463e      	mov	r6, r7
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	4632      	mov	r2, r6
 8005312:	4641      	mov	r1, r8
 8005314:	f000 fab6 	bl	8005884 <memmove>
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	1b9b      	subs	r3, r3, r6
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	4433      	add	r3, r6
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	2000      	movs	r0, #0
 8005326:	e7db      	b.n	80052e0 <__ssputs_r+0x58>
 8005328:	462a      	mov	r2, r5
 800532a:	f000 fba5 	bl	8005a78 <_realloc_r>
 800532e:	4606      	mov	r6, r0
 8005330:	2800      	cmp	r0, #0
 8005332:	d1e1      	bne.n	80052f8 <__ssputs_r+0x70>
 8005334:	6921      	ldr	r1, [r4, #16]
 8005336:	4650      	mov	r0, sl
 8005338:	f000 fabe 	bl	80058b8 <_free_r>
 800533c:	e7c7      	b.n	80052ce <__ssputs_r+0x46>
	...

08005340 <_svfiprintf_r>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	4698      	mov	r8, r3
 8005346:	898b      	ldrh	r3, [r1, #12]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	b09d      	sub	sp, #116	; 0x74
 800534c:	4607      	mov	r7, r0
 800534e:	460d      	mov	r5, r1
 8005350:	4614      	mov	r4, r2
 8005352:	d50e      	bpl.n	8005372 <_svfiprintf_r+0x32>
 8005354:	690b      	ldr	r3, [r1, #16]
 8005356:	b963      	cbnz	r3, 8005372 <_svfiprintf_r+0x32>
 8005358:	2140      	movs	r1, #64	; 0x40
 800535a:	f000 fb19 	bl	8005990 <_malloc_r>
 800535e:	6028      	str	r0, [r5, #0]
 8005360:	6128      	str	r0, [r5, #16]
 8005362:	b920      	cbnz	r0, 800536e <_svfiprintf_r+0x2e>
 8005364:	230c      	movs	r3, #12
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	e0d1      	b.n	8005512 <_svfiprintf_r+0x1d2>
 800536e:	2340      	movs	r3, #64	; 0x40
 8005370:	616b      	str	r3, [r5, #20]
 8005372:	2300      	movs	r3, #0
 8005374:	9309      	str	r3, [sp, #36]	; 0x24
 8005376:	2320      	movs	r3, #32
 8005378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800537c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005380:	2330      	movs	r3, #48	; 0x30
 8005382:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800552c <_svfiprintf_r+0x1ec>
 8005386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800538a:	f04f 0901 	mov.w	r9, #1
 800538e:	4623      	mov	r3, r4
 8005390:	469a      	mov	sl, r3
 8005392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005396:	b10a      	cbz	r2, 800539c <_svfiprintf_r+0x5c>
 8005398:	2a25      	cmp	r2, #37	; 0x25
 800539a:	d1f9      	bne.n	8005390 <_svfiprintf_r+0x50>
 800539c:	ebba 0b04 	subs.w	fp, sl, r4
 80053a0:	d00b      	beq.n	80053ba <_svfiprintf_r+0x7a>
 80053a2:	465b      	mov	r3, fp
 80053a4:	4622      	mov	r2, r4
 80053a6:	4629      	mov	r1, r5
 80053a8:	4638      	mov	r0, r7
 80053aa:	f7ff ff6d 	bl	8005288 <__ssputs_r>
 80053ae:	3001      	adds	r0, #1
 80053b0:	f000 80aa 	beq.w	8005508 <_svfiprintf_r+0x1c8>
 80053b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053b6:	445a      	add	r2, fp
 80053b8:	9209      	str	r2, [sp, #36]	; 0x24
 80053ba:	f89a 3000 	ldrb.w	r3, [sl]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 80a2 	beq.w	8005508 <_svfiprintf_r+0x1c8>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053ce:	f10a 0a01 	add.w	sl, sl, #1
 80053d2:	9304      	str	r3, [sp, #16]
 80053d4:	9307      	str	r3, [sp, #28]
 80053d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053da:	931a      	str	r3, [sp, #104]	; 0x68
 80053dc:	4654      	mov	r4, sl
 80053de:	2205      	movs	r2, #5
 80053e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e4:	4851      	ldr	r0, [pc, #324]	; (800552c <_svfiprintf_r+0x1ec>)
 80053e6:	f7fa ff7b 	bl	80002e0 <memchr>
 80053ea:	9a04      	ldr	r2, [sp, #16]
 80053ec:	b9d8      	cbnz	r0, 8005426 <_svfiprintf_r+0xe6>
 80053ee:	06d0      	lsls	r0, r2, #27
 80053f0:	bf44      	itt	mi
 80053f2:	2320      	movmi	r3, #32
 80053f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f8:	0711      	lsls	r1, r2, #28
 80053fa:	bf44      	itt	mi
 80053fc:	232b      	movmi	r3, #43	; 0x2b
 80053fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005402:	f89a 3000 	ldrb.w	r3, [sl]
 8005406:	2b2a      	cmp	r3, #42	; 0x2a
 8005408:	d015      	beq.n	8005436 <_svfiprintf_r+0xf6>
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	4654      	mov	r4, sl
 800540e:	2000      	movs	r0, #0
 8005410:	f04f 0c0a 	mov.w	ip, #10
 8005414:	4621      	mov	r1, r4
 8005416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800541a:	3b30      	subs	r3, #48	; 0x30
 800541c:	2b09      	cmp	r3, #9
 800541e:	d94e      	bls.n	80054be <_svfiprintf_r+0x17e>
 8005420:	b1b0      	cbz	r0, 8005450 <_svfiprintf_r+0x110>
 8005422:	9207      	str	r2, [sp, #28]
 8005424:	e014      	b.n	8005450 <_svfiprintf_r+0x110>
 8005426:	eba0 0308 	sub.w	r3, r0, r8
 800542a:	fa09 f303 	lsl.w	r3, r9, r3
 800542e:	4313      	orrs	r3, r2
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	46a2      	mov	sl, r4
 8005434:	e7d2      	b.n	80053dc <_svfiprintf_r+0x9c>
 8005436:	9b03      	ldr	r3, [sp, #12]
 8005438:	1d19      	adds	r1, r3, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	9103      	str	r1, [sp, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfbb      	ittet	lt
 8005442:	425b      	neglt	r3, r3
 8005444:	f042 0202 	orrlt.w	r2, r2, #2
 8005448:	9307      	strge	r3, [sp, #28]
 800544a:	9307      	strlt	r3, [sp, #28]
 800544c:	bfb8      	it	lt
 800544e:	9204      	strlt	r2, [sp, #16]
 8005450:	7823      	ldrb	r3, [r4, #0]
 8005452:	2b2e      	cmp	r3, #46	; 0x2e
 8005454:	d10c      	bne.n	8005470 <_svfiprintf_r+0x130>
 8005456:	7863      	ldrb	r3, [r4, #1]
 8005458:	2b2a      	cmp	r3, #42	; 0x2a
 800545a:	d135      	bne.n	80054c8 <_svfiprintf_r+0x188>
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	1d1a      	adds	r2, r3, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	9203      	str	r2, [sp, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	bfb8      	it	lt
 8005468:	f04f 33ff 	movlt.w	r3, #4294967295
 800546c:	3402      	adds	r4, #2
 800546e:	9305      	str	r3, [sp, #20]
 8005470:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800553c <_svfiprintf_r+0x1fc>
 8005474:	7821      	ldrb	r1, [r4, #0]
 8005476:	2203      	movs	r2, #3
 8005478:	4650      	mov	r0, sl
 800547a:	f7fa ff31 	bl	80002e0 <memchr>
 800547e:	b140      	cbz	r0, 8005492 <_svfiprintf_r+0x152>
 8005480:	2340      	movs	r3, #64	; 0x40
 8005482:	eba0 000a 	sub.w	r0, r0, sl
 8005486:	fa03 f000 	lsl.w	r0, r3, r0
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	4303      	orrs	r3, r0
 800548e:	3401      	adds	r4, #1
 8005490:	9304      	str	r3, [sp, #16]
 8005492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005496:	4826      	ldr	r0, [pc, #152]	; (8005530 <_svfiprintf_r+0x1f0>)
 8005498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800549c:	2206      	movs	r2, #6
 800549e:	f7fa ff1f 	bl	80002e0 <memchr>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d038      	beq.n	8005518 <_svfiprintf_r+0x1d8>
 80054a6:	4b23      	ldr	r3, [pc, #140]	; (8005534 <_svfiprintf_r+0x1f4>)
 80054a8:	bb1b      	cbnz	r3, 80054f2 <_svfiprintf_r+0x1b2>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	3307      	adds	r3, #7
 80054ae:	f023 0307 	bic.w	r3, r3, #7
 80054b2:	3308      	adds	r3, #8
 80054b4:	9303      	str	r3, [sp, #12]
 80054b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b8:	4433      	add	r3, r6
 80054ba:	9309      	str	r3, [sp, #36]	; 0x24
 80054bc:	e767      	b.n	800538e <_svfiprintf_r+0x4e>
 80054be:	fb0c 3202 	mla	r2, ip, r2, r3
 80054c2:	460c      	mov	r4, r1
 80054c4:	2001      	movs	r0, #1
 80054c6:	e7a5      	b.n	8005414 <_svfiprintf_r+0xd4>
 80054c8:	2300      	movs	r3, #0
 80054ca:	3401      	adds	r4, #1
 80054cc:	9305      	str	r3, [sp, #20]
 80054ce:	4619      	mov	r1, r3
 80054d0:	f04f 0c0a 	mov.w	ip, #10
 80054d4:	4620      	mov	r0, r4
 80054d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054da:	3a30      	subs	r2, #48	; 0x30
 80054dc:	2a09      	cmp	r2, #9
 80054de:	d903      	bls.n	80054e8 <_svfiprintf_r+0x1a8>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0c5      	beq.n	8005470 <_svfiprintf_r+0x130>
 80054e4:	9105      	str	r1, [sp, #20]
 80054e6:	e7c3      	b.n	8005470 <_svfiprintf_r+0x130>
 80054e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054ec:	4604      	mov	r4, r0
 80054ee:	2301      	movs	r3, #1
 80054f0:	e7f0      	b.n	80054d4 <_svfiprintf_r+0x194>
 80054f2:	ab03      	add	r3, sp, #12
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	462a      	mov	r2, r5
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <_svfiprintf_r+0x1f8>)
 80054fa:	a904      	add	r1, sp, #16
 80054fc:	4638      	mov	r0, r7
 80054fe:	f3af 8000 	nop.w
 8005502:	1c42      	adds	r2, r0, #1
 8005504:	4606      	mov	r6, r0
 8005506:	d1d6      	bne.n	80054b6 <_svfiprintf_r+0x176>
 8005508:	89ab      	ldrh	r3, [r5, #12]
 800550a:	065b      	lsls	r3, r3, #25
 800550c:	f53f af2c 	bmi.w	8005368 <_svfiprintf_r+0x28>
 8005510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005512:	b01d      	add	sp, #116	; 0x74
 8005514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005518:	ab03      	add	r3, sp, #12
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	462a      	mov	r2, r5
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <_svfiprintf_r+0x1f8>)
 8005520:	a904      	add	r1, sp, #16
 8005522:	4638      	mov	r0, r7
 8005524:	f000 f87a 	bl	800561c <_printf_i>
 8005528:	e7eb      	b.n	8005502 <_svfiprintf_r+0x1c2>
 800552a:	bf00      	nop
 800552c:	08005dc0 	.word	0x08005dc0
 8005530:	08005dca 	.word	0x08005dca
 8005534:	00000000 	.word	0x00000000
 8005538:	08005289 	.word	0x08005289
 800553c:	08005dc6 	.word	0x08005dc6

08005540 <_printf_common>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	4616      	mov	r6, r2
 8005546:	4699      	mov	r9, r3
 8005548:	688a      	ldr	r2, [r1, #8]
 800554a:	690b      	ldr	r3, [r1, #16]
 800554c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005550:	4293      	cmp	r3, r2
 8005552:	bfb8      	it	lt
 8005554:	4613      	movlt	r3, r2
 8005556:	6033      	str	r3, [r6, #0]
 8005558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800555c:	4607      	mov	r7, r0
 800555e:	460c      	mov	r4, r1
 8005560:	b10a      	cbz	r2, 8005566 <_printf_common+0x26>
 8005562:	3301      	adds	r3, #1
 8005564:	6033      	str	r3, [r6, #0]
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	0699      	lsls	r1, r3, #26
 800556a:	bf42      	ittt	mi
 800556c:	6833      	ldrmi	r3, [r6, #0]
 800556e:	3302      	addmi	r3, #2
 8005570:	6033      	strmi	r3, [r6, #0]
 8005572:	6825      	ldr	r5, [r4, #0]
 8005574:	f015 0506 	ands.w	r5, r5, #6
 8005578:	d106      	bne.n	8005588 <_printf_common+0x48>
 800557a:	f104 0a19 	add.w	sl, r4, #25
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	6832      	ldr	r2, [r6, #0]
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	42ab      	cmp	r3, r5
 8005586:	dc26      	bgt.n	80055d6 <_printf_common+0x96>
 8005588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800558c:	1e13      	subs	r3, r2, #0
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	bf18      	it	ne
 8005592:	2301      	movne	r3, #1
 8005594:	0692      	lsls	r2, r2, #26
 8005596:	d42b      	bmi.n	80055f0 <_printf_common+0xb0>
 8005598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800559c:	4649      	mov	r1, r9
 800559e:	4638      	mov	r0, r7
 80055a0:	47c0      	blx	r8
 80055a2:	3001      	adds	r0, #1
 80055a4:	d01e      	beq.n	80055e4 <_printf_common+0xa4>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	68e5      	ldr	r5, [r4, #12]
 80055aa:	6832      	ldr	r2, [r6, #0]
 80055ac:	f003 0306 	and.w	r3, r3, #6
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	bf08      	it	eq
 80055b4:	1aad      	subeq	r5, r5, r2
 80055b6:	68a3      	ldr	r3, [r4, #8]
 80055b8:	6922      	ldr	r2, [r4, #16]
 80055ba:	bf0c      	ite	eq
 80055bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c0:	2500      	movne	r5, #0
 80055c2:	4293      	cmp	r3, r2
 80055c4:	bfc4      	itt	gt
 80055c6:	1a9b      	subgt	r3, r3, r2
 80055c8:	18ed      	addgt	r5, r5, r3
 80055ca:	2600      	movs	r6, #0
 80055cc:	341a      	adds	r4, #26
 80055ce:	42b5      	cmp	r5, r6
 80055d0:	d11a      	bne.n	8005608 <_printf_common+0xc8>
 80055d2:	2000      	movs	r0, #0
 80055d4:	e008      	b.n	80055e8 <_printf_common+0xa8>
 80055d6:	2301      	movs	r3, #1
 80055d8:	4652      	mov	r2, sl
 80055da:	4649      	mov	r1, r9
 80055dc:	4638      	mov	r0, r7
 80055de:	47c0      	blx	r8
 80055e0:	3001      	adds	r0, #1
 80055e2:	d103      	bne.n	80055ec <_printf_common+0xac>
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ec:	3501      	adds	r5, #1
 80055ee:	e7c6      	b.n	800557e <_printf_common+0x3e>
 80055f0:	18e1      	adds	r1, r4, r3
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	2030      	movs	r0, #48	; 0x30
 80055f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055fa:	4422      	add	r2, r4
 80055fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005604:	3302      	adds	r3, #2
 8005606:	e7c7      	b.n	8005598 <_printf_common+0x58>
 8005608:	2301      	movs	r3, #1
 800560a:	4622      	mov	r2, r4
 800560c:	4649      	mov	r1, r9
 800560e:	4638      	mov	r0, r7
 8005610:	47c0      	blx	r8
 8005612:	3001      	adds	r0, #1
 8005614:	d0e6      	beq.n	80055e4 <_printf_common+0xa4>
 8005616:	3601      	adds	r6, #1
 8005618:	e7d9      	b.n	80055ce <_printf_common+0x8e>
	...

0800561c <_printf_i>:
 800561c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	7e0f      	ldrb	r7, [r1, #24]
 8005622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005624:	2f78      	cmp	r7, #120	; 0x78
 8005626:	4691      	mov	r9, r2
 8005628:	4680      	mov	r8, r0
 800562a:	460c      	mov	r4, r1
 800562c:	469a      	mov	sl, r3
 800562e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005632:	d807      	bhi.n	8005644 <_printf_i+0x28>
 8005634:	2f62      	cmp	r7, #98	; 0x62
 8005636:	d80a      	bhi.n	800564e <_printf_i+0x32>
 8005638:	2f00      	cmp	r7, #0
 800563a:	f000 80d8 	beq.w	80057ee <_printf_i+0x1d2>
 800563e:	2f58      	cmp	r7, #88	; 0x58
 8005640:	f000 80a3 	beq.w	800578a <_printf_i+0x16e>
 8005644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800564c:	e03a      	b.n	80056c4 <_printf_i+0xa8>
 800564e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005652:	2b15      	cmp	r3, #21
 8005654:	d8f6      	bhi.n	8005644 <_printf_i+0x28>
 8005656:	a101      	add	r1, pc, #4	; (adr r1, 800565c <_printf_i+0x40>)
 8005658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800565c:	080056b5 	.word	0x080056b5
 8005660:	080056c9 	.word	0x080056c9
 8005664:	08005645 	.word	0x08005645
 8005668:	08005645 	.word	0x08005645
 800566c:	08005645 	.word	0x08005645
 8005670:	08005645 	.word	0x08005645
 8005674:	080056c9 	.word	0x080056c9
 8005678:	08005645 	.word	0x08005645
 800567c:	08005645 	.word	0x08005645
 8005680:	08005645 	.word	0x08005645
 8005684:	08005645 	.word	0x08005645
 8005688:	080057d5 	.word	0x080057d5
 800568c:	080056f9 	.word	0x080056f9
 8005690:	080057b7 	.word	0x080057b7
 8005694:	08005645 	.word	0x08005645
 8005698:	08005645 	.word	0x08005645
 800569c:	080057f7 	.word	0x080057f7
 80056a0:	08005645 	.word	0x08005645
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	08005645 	.word	0x08005645
 80056ac:	08005645 	.word	0x08005645
 80056b0:	080057bf 	.word	0x080057bf
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	1d1a      	adds	r2, r3, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	602a      	str	r2, [r5, #0]
 80056bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0a3      	b.n	8005810 <_printf_i+0x1f4>
 80056c8:	6820      	ldr	r0, [r4, #0]
 80056ca:	6829      	ldr	r1, [r5, #0]
 80056cc:	0606      	lsls	r6, r0, #24
 80056ce:	f101 0304 	add.w	r3, r1, #4
 80056d2:	d50a      	bpl.n	80056ea <_printf_i+0xce>
 80056d4:	680e      	ldr	r6, [r1, #0]
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	2e00      	cmp	r6, #0
 80056da:	da03      	bge.n	80056e4 <_printf_i+0xc8>
 80056dc:	232d      	movs	r3, #45	; 0x2d
 80056de:	4276      	negs	r6, r6
 80056e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e4:	485e      	ldr	r0, [pc, #376]	; (8005860 <_printf_i+0x244>)
 80056e6:	230a      	movs	r3, #10
 80056e8:	e019      	b.n	800571e <_printf_i+0x102>
 80056ea:	680e      	ldr	r6, [r1, #0]
 80056ec:	602b      	str	r3, [r5, #0]
 80056ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056f2:	bf18      	it	ne
 80056f4:	b236      	sxthne	r6, r6
 80056f6:	e7ef      	b.n	80056d8 <_printf_i+0xbc>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	1d19      	adds	r1, r3, #4
 80056fe:	6029      	str	r1, [r5, #0]
 8005700:	0601      	lsls	r1, r0, #24
 8005702:	d501      	bpl.n	8005708 <_printf_i+0xec>
 8005704:	681e      	ldr	r6, [r3, #0]
 8005706:	e002      	b.n	800570e <_printf_i+0xf2>
 8005708:	0646      	lsls	r6, r0, #25
 800570a:	d5fb      	bpl.n	8005704 <_printf_i+0xe8>
 800570c:	881e      	ldrh	r6, [r3, #0]
 800570e:	4854      	ldr	r0, [pc, #336]	; (8005860 <_printf_i+0x244>)
 8005710:	2f6f      	cmp	r7, #111	; 0x6f
 8005712:	bf0c      	ite	eq
 8005714:	2308      	moveq	r3, #8
 8005716:	230a      	movne	r3, #10
 8005718:	2100      	movs	r1, #0
 800571a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800571e:	6865      	ldr	r5, [r4, #4]
 8005720:	60a5      	str	r5, [r4, #8]
 8005722:	2d00      	cmp	r5, #0
 8005724:	bfa2      	ittt	ge
 8005726:	6821      	ldrge	r1, [r4, #0]
 8005728:	f021 0104 	bicge.w	r1, r1, #4
 800572c:	6021      	strge	r1, [r4, #0]
 800572e:	b90e      	cbnz	r6, 8005734 <_printf_i+0x118>
 8005730:	2d00      	cmp	r5, #0
 8005732:	d04d      	beq.n	80057d0 <_printf_i+0x1b4>
 8005734:	4615      	mov	r5, r2
 8005736:	fbb6 f1f3 	udiv	r1, r6, r3
 800573a:	fb03 6711 	mls	r7, r3, r1, r6
 800573e:	5dc7      	ldrb	r7, [r0, r7]
 8005740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005744:	4637      	mov	r7, r6
 8005746:	42bb      	cmp	r3, r7
 8005748:	460e      	mov	r6, r1
 800574a:	d9f4      	bls.n	8005736 <_printf_i+0x11a>
 800574c:	2b08      	cmp	r3, #8
 800574e:	d10b      	bne.n	8005768 <_printf_i+0x14c>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	07de      	lsls	r6, r3, #31
 8005754:	d508      	bpl.n	8005768 <_printf_i+0x14c>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	6861      	ldr	r1, [r4, #4]
 800575a:	4299      	cmp	r1, r3
 800575c:	bfde      	ittt	le
 800575e:	2330      	movle	r3, #48	; 0x30
 8005760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005764:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005768:	1b52      	subs	r2, r2, r5
 800576a:	6122      	str	r2, [r4, #16]
 800576c:	f8cd a000 	str.w	sl, [sp]
 8005770:	464b      	mov	r3, r9
 8005772:	aa03      	add	r2, sp, #12
 8005774:	4621      	mov	r1, r4
 8005776:	4640      	mov	r0, r8
 8005778:	f7ff fee2 	bl	8005540 <_printf_common>
 800577c:	3001      	adds	r0, #1
 800577e:	d14c      	bne.n	800581a <_printf_i+0x1fe>
 8005780:	f04f 30ff 	mov.w	r0, #4294967295
 8005784:	b004      	add	sp, #16
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578a:	4835      	ldr	r0, [pc, #212]	; (8005860 <_printf_i+0x244>)
 800578c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005790:	6829      	ldr	r1, [r5, #0]
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	f851 6b04 	ldr.w	r6, [r1], #4
 8005798:	6029      	str	r1, [r5, #0]
 800579a:	061d      	lsls	r5, r3, #24
 800579c:	d514      	bpl.n	80057c8 <_printf_i+0x1ac>
 800579e:	07df      	lsls	r7, r3, #31
 80057a0:	bf44      	itt	mi
 80057a2:	f043 0320 	orrmi.w	r3, r3, #32
 80057a6:	6023      	strmi	r3, [r4, #0]
 80057a8:	b91e      	cbnz	r6, 80057b2 <_printf_i+0x196>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f023 0320 	bic.w	r3, r3, #32
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	2310      	movs	r3, #16
 80057b4:	e7b0      	b.n	8005718 <_printf_i+0xfc>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	f043 0320 	orr.w	r3, r3, #32
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	2378      	movs	r3, #120	; 0x78
 80057c0:	4828      	ldr	r0, [pc, #160]	; (8005864 <_printf_i+0x248>)
 80057c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057c6:	e7e3      	b.n	8005790 <_printf_i+0x174>
 80057c8:	0659      	lsls	r1, r3, #25
 80057ca:	bf48      	it	mi
 80057cc:	b2b6      	uxthmi	r6, r6
 80057ce:	e7e6      	b.n	800579e <_printf_i+0x182>
 80057d0:	4615      	mov	r5, r2
 80057d2:	e7bb      	b.n	800574c <_printf_i+0x130>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	6826      	ldr	r6, [r4, #0]
 80057d8:	6961      	ldr	r1, [r4, #20]
 80057da:	1d18      	adds	r0, r3, #4
 80057dc:	6028      	str	r0, [r5, #0]
 80057de:	0635      	lsls	r5, r6, #24
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0x1cc>
 80057e4:	6019      	str	r1, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0x1d2>
 80057e8:	0670      	lsls	r0, r6, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0x1c8>
 80057ec:	8019      	strh	r1, [r3, #0]
 80057ee:	2300      	movs	r3, #0
 80057f0:	6123      	str	r3, [r4, #16]
 80057f2:	4615      	mov	r5, r2
 80057f4:	e7ba      	b.n	800576c <_printf_i+0x150>
 80057f6:	682b      	ldr	r3, [r5, #0]
 80057f8:	1d1a      	adds	r2, r3, #4
 80057fa:	602a      	str	r2, [r5, #0]
 80057fc:	681d      	ldr	r5, [r3, #0]
 80057fe:	6862      	ldr	r2, [r4, #4]
 8005800:	2100      	movs	r1, #0
 8005802:	4628      	mov	r0, r5
 8005804:	f7fa fd6c 	bl	80002e0 <memchr>
 8005808:	b108      	cbz	r0, 800580e <_printf_i+0x1f2>
 800580a:	1b40      	subs	r0, r0, r5
 800580c:	6060      	str	r0, [r4, #4]
 800580e:	6863      	ldr	r3, [r4, #4]
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	2300      	movs	r3, #0
 8005814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005818:	e7a8      	b.n	800576c <_printf_i+0x150>
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	462a      	mov	r2, r5
 800581e:	4649      	mov	r1, r9
 8005820:	4640      	mov	r0, r8
 8005822:	47d0      	blx	sl
 8005824:	3001      	adds	r0, #1
 8005826:	d0ab      	beq.n	8005780 <_printf_i+0x164>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	079b      	lsls	r3, r3, #30
 800582c:	d413      	bmi.n	8005856 <_printf_i+0x23a>
 800582e:	68e0      	ldr	r0, [r4, #12]
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	4298      	cmp	r0, r3
 8005834:	bfb8      	it	lt
 8005836:	4618      	movlt	r0, r3
 8005838:	e7a4      	b.n	8005784 <_printf_i+0x168>
 800583a:	2301      	movs	r3, #1
 800583c:	4632      	mov	r2, r6
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	47d0      	blx	sl
 8005844:	3001      	adds	r0, #1
 8005846:	d09b      	beq.n	8005780 <_printf_i+0x164>
 8005848:	3501      	adds	r5, #1
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	9903      	ldr	r1, [sp, #12]
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	42ab      	cmp	r3, r5
 8005852:	dcf2      	bgt.n	800583a <_printf_i+0x21e>
 8005854:	e7eb      	b.n	800582e <_printf_i+0x212>
 8005856:	2500      	movs	r5, #0
 8005858:	f104 0619 	add.w	r6, r4, #25
 800585c:	e7f5      	b.n	800584a <_printf_i+0x22e>
 800585e:	bf00      	nop
 8005860:	08005dd1 	.word	0x08005dd1
 8005864:	08005de2 	.word	0x08005de2

08005868 <memcpy>:
 8005868:	440a      	add	r2, r1
 800586a:	4291      	cmp	r1, r2
 800586c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005870:	d100      	bne.n	8005874 <memcpy+0xc>
 8005872:	4770      	bx	lr
 8005874:	b510      	push	{r4, lr}
 8005876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800587a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800587e:	4291      	cmp	r1, r2
 8005880:	d1f9      	bne.n	8005876 <memcpy+0xe>
 8005882:	bd10      	pop	{r4, pc}

08005884 <memmove>:
 8005884:	4288      	cmp	r0, r1
 8005886:	b510      	push	{r4, lr}
 8005888:	eb01 0402 	add.w	r4, r1, r2
 800588c:	d902      	bls.n	8005894 <memmove+0x10>
 800588e:	4284      	cmp	r4, r0
 8005890:	4623      	mov	r3, r4
 8005892:	d807      	bhi.n	80058a4 <memmove+0x20>
 8005894:	1e43      	subs	r3, r0, #1
 8005896:	42a1      	cmp	r1, r4
 8005898:	d008      	beq.n	80058ac <memmove+0x28>
 800589a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800589e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058a2:	e7f8      	b.n	8005896 <memmove+0x12>
 80058a4:	4402      	add	r2, r0
 80058a6:	4601      	mov	r1, r0
 80058a8:	428a      	cmp	r2, r1
 80058aa:	d100      	bne.n	80058ae <memmove+0x2a>
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058b6:	e7f7      	b.n	80058a8 <memmove+0x24>

080058b8 <_free_r>:
 80058b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ba:	2900      	cmp	r1, #0
 80058bc:	d044      	beq.n	8005948 <_free_r+0x90>
 80058be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c2:	9001      	str	r0, [sp, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f1a1 0404 	sub.w	r4, r1, #4
 80058ca:	bfb8      	it	lt
 80058cc:	18e4      	addlt	r4, r4, r3
 80058ce:	f000 f913 	bl	8005af8 <__malloc_lock>
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <_free_r+0x94>)
 80058d4:	9801      	ldr	r0, [sp, #4]
 80058d6:	6813      	ldr	r3, [r2, #0]
 80058d8:	b933      	cbnz	r3, 80058e8 <_free_r+0x30>
 80058da:	6063      	str	r3, [r4, #4]
 80058dc:	6014      	str	r4, [r2, #0]
 80058de:	b003      	add	sp, #12
 80058e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058e4:	f000 b90e 	b.w	8005b04 <__malloc_unlock>
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	d908      	bls.n	80058fe <_free_r+0x46>
 80058ec:	6825      	ldr	r5, [r4, #0]
 80058ee:	1961      	adds	r1, r4, r5
 80058f0:	428b      	cmp	r3, r1
 80058f2:	bf01      	itttt	eq
 80058f4:	6819      	ldreq	r1, [r3, #0]
 80058f6:	685b      	ldreq	r3, [r3, #4]
 80058f8:	1949      	addeq	r1, r1, r5
 80058fa:	6021      	streq	r1, [r4, #0]
 80058fc:	e7ed      	b.n	80058da <_free_r+0x22>
 80058fe:	461a      	mov	r2, r3
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b10b      	cbz	r3, 8005908 <_free_r+0x50>
 8005904:	42a3      	cmp	r3, r4
 8005906:	d9fa      	bls.n	80058fe <_free_r+0x46>
 8005908:	6811      	ldr	r1, [r2, #0]
 800590a:	1855      	adds	r5, r2, r1
 800590c:	42a5      	cmp	r5, r4
 800590e:	d10b      	bne.n	8005928 <_free_r+0x70>
 8005910:	6824      	ldr	r4, [r4, #0]
 8005912:	4421      	add	r1, r4
 8005914:	1854      	adds	r4, r2, r1
 8005916:	42a3      	cmp	r3, r4
 8005918:	6011      	str	r1, [r2, #0]
 800591a:	d1e0      	bne.n	80058de <_free_r+0x26>
 800591c:	681c      	ldr	r4, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	6053      	str	r3, [r2, #4]
 8005922:	4421      	add	r1, r4
 8005924:	6011      	str	r1, [r2, #0]
 8005926:	e7da      	b.n	80058de <_free_r+0x26>
 8005928:	d902      	bls.n	8005930 <_free_r+0x78>
 800592a:	230c      	movs	r3, #12
 800592c:	6003      	str	r3, [r0, #0]
 800592e:	e7d6      	b.n	80058de <_free_r+0x26>
 8005930:	6825      	ldr	r5, [r4, #0]
 8005932:	1961      	adds	r1, r4, r5
 8005934:	428b      	cmp	r3, r1
 8005936:	bf04      	itt	eq
 8005938:	6819      	ldreq	r1, [r3, #0]
 800593a:	685b      	ldreq	r3, [r3, #4]
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	bf04      	itt	eq
 8005940:	1949      	addeq	r1, r1, r5
 8005942:	6021      	streq	r1, [r4, #0]
 8005944:	6054      	str	r4, [r2, #4]
 8005946:	e7ca      	b.n	80058de <_free_r+0x26>
 8005948:	b003      	add	sp, #12
 800594a:	bd30      	pop	{r4, r5, pc}
 800594c:	24000170 	.word	0x24000170

08005950 <sbrk_aligned>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4e0e      	ldr	r6, [pc, #56]	; (800598c <sbrk_aligned+0x3c>)
 8005954:	460c      	mov	r4, r1
 8005956:	6831      	ldr	r1, [r6, #0]
 8005958:	4605      	mov	r5, r0
 800595a:	b911      	cbnz	r1, 8005962 <sbrk_aligned+0x12>
 800595c:	f000 f8bc 	bl	8005ad8 <_sbrk_r>
 8005960:	6030      	str	r0, [r6, #0]
 8005962:	4621      	mov	r1, r4
 8005964:	4628      	mov	r0, r5
 8005966:	f000 f8b7 	bl	8005ad8 <_sbrk_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d00a      	beq.n	8005984 <sbrk_aligned+0x34>
 800596e:	1cc4      	adds	r4, r0, #3
 8005970:	f024 0403 	bic.w	r4, r4, #3
 8005974:	42a0      	cmp	r0, r4
 8005976:	d007      	beq.n	8005988 <sbrk_aligned+0x38>
 8005978:	1a21      	subs	r1, r4, r0
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f8ac 	bl	8005ad8 <_sbrk_r>
 8005980:	3001      	adds	r0, #1
 8005982:	d101      	bne.n	8005988 <sbrk_aligned+0x38>
 8005984:	f04f 34ff 	mov.w	r4, #4294967295
 8005988:	4620      	mov	r0, r4
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	24000174 	.word	0x24000174

08005990 <_malloc_r>:
 8005990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	1ccd      	adds	r5, r1, #3
 8005996:	f025 0503 	bic.w	r5, r5, #3
 800599a:	3508      	adds	r5, #8
 800599c:	2d0c      	cmp	r5, #12
 800599e:	bf38      	it	cc
 80059a0:	250c      	movcc	r5, #12
 80059a2:	2d00      	cmp	r5, #0
 80059a4:	4607      	mov	r7, r0
 80059a6:	db01      	blt.n	80059ac <_malloc_r+0x1c>
 80059a8:	42a9      	cmp	r1, r5
 80059aa:	d905      	bls.n	80059b8 <_malloc_r+0x28>
 80059ac:	230c      	movs	r3, #12
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	2600      	movs	r6, #0
 80059b2:	4630      	mov	r0, r6
 80059b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b8:	4e2e      	ldr	r6, [pc, #184]	; (8005a74 <_malloc_r+0xe4>)
 80059ba:	f000 f89d 	bl	8005af8 <__malloc_lock>
 80059be:	6833      	ldr	r3, [r6, #0]
 80059c0:	461c      	mov	r4, r3
 80059c2:	bb34      	cbnz	r4, 8005a12 <_malloc_r+0x82>
 80059c4:	4629      	mov	r1, r5
 80059c6:	4638      	mov	r0, r7
 80059c8:	f7ff ffc2 	bl	8005950 <sbrk_aligned>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	4604      	mov	r4, r0
 80059d0:	d14d      	bne.n	8005a6e <_malloc_r+0xde>
 80059d2:	6834      	ldr	r4, [r6, #0]
 80059d4:	4626      	mov	r6, r4
 80059d6:	2e00      	cmp	r6, #0
 80059d8:	d140      	bne.n	8005a5c <_malloc_r+0xcc>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	4631      	mov	r1, r6
 80059de:	4638      	mov	r0, r7
 80059e0:	eb04 0803 	add.w	r8, r4, r3
 80059e4:	f000 f878 	bl	8005ad8 <_sbrk_r>
 80059e8:	4580      	cmp	r8, r0
 80059ea:	d13a      	bne.n	8005a62 <_malloc_r+0xd2>
 80059ec:	6821      	ldr	r1, [r4, #0]
 80059ee:	3503      	adds	r5, #3
 80059f0:	1a6d      	subs	r5, r5, r1
 80059f2:	f025 0503 	bic.w	r5, r5, #3
 80059f6:	3508      	adds	r5, #8
 80059f8:	2d0c      	cmp	r5, #12
 80059fa:	bf38      	it	cc
 80059fc:	250c      	movcc	r5, #12
 80059fe:	4629      	mov	r1, r5
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff ffa5 	bl	8005950 <sbrk_aligned>
 8005a06:	3001      	adds	r0, #1
 8005a08:	d02b      	beq.n	8005a62 <_malloc_r+0xd2>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	442b      	add	r3, r5
 8005a0e:	6023      	str	r3, [r4, #0]
 8005a10:	e00e      	b.n	8005a30 <_malloc_r+0xa0>
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	1b52      	subs	r2, r2, r5
 8005a16:	d41e      	bmi.n	8005a56 <_malloc_r+0xc6>
 8005a18:	2a0b      	cmp	r2, #11
 8005a1a:	d916      	bls.n	8005a4a <_malloc_r+0xba>
 8005a1c:	1961      	adds	r1, r4, r5
 8005a1e:	42a3      	cmp	r3, r4
 8005a20:	6025      	str	r5, [r4, #0]
 8005a22:	bf18      	it	ne
 8005a24:	6059      	strne	r1, [r3, #4]
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	bf08      	it	eq
 8005a2a:	6031      	streq	r1, [r6, #0]
 8005a2c:	5162      	str	r2, [r4, r5]
 8005a2e:	604b      	str	r3, [r1, #4]
 8005a30:	4638      	mov	r0, r7
 8005a32:	f104 060b 	add.w	r6, r4, #11
 8005a36:	f000 f865 	bl	8005b04 <__malloc_unlock>
 8005a3a:	f026 0607 	bic.w	r6, r6, #7
 8005a3e:	1d23      	adds	r3, r4, #4
 8005a40:	1af2      	subs	r2, r6, r3
 8005a42:	d0b6      	beq.n	80059b2 <_malloc_r+0x22>
 8005a44:	1b9b      	subs	r3, r3, r6
 8005a46:	50a3      	str	r3, [r4, r2]
 8005a48:	e7b3      	b.n	80059b2 <_malloc_r+0x22>
 8005a4a:	6862      	ldr	r2, [r4, #4]
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	bf0c      	ite	eq
 8005a50:	6032      	streq	r2, [r6, #0]
 8005a52:	605a      	strne	r2, [r3, #4]
 8005a54:	e7ec      	b.n	8005a30 <_malloc_r+0xa0>
 8005a56:	4623      	mov	r3, r4
 8005a58:	6864      	ldr	r4, [r4, #4]
 8005a5a:	e7b2      	b.n	80059c2 <_malloc_r+0x32>
 8005a5c:	4634      	mov	r4, r6
 8005a5e:	6876      	ldr	r6, [r6, #4]
 8005a60:	e7b9      	b.n	80059d6 <_malloc_r+0x46>
 8005a62:	230c      	movs	r3, #12
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	4638      	mov	r0, r7
 8005a68:	f000 f84c 	bl	8005b04 <__malloc_unlock>
 8005a6c:	e7a1      	b.n	80059b2 <_malloc_r+0x22>
 8005a6e:	6025      	str	r5, [r4, #0]
 8005a70:	e7de      	b.n	8005a30 <_malloc_r+0xa0>
 8005a72:	bf00      	nop
 8005a74:	24000170 	.word	0x24000170

08005a78 <_realloc_r>:
 8005a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7c:	4680      	mov	r8, r0
 8005a7e:	4614      	mov	r4, r2
 8005a80:	460e      	mov	r6, r1
 8005a82:	b921      	cbnz	r1, 8005a8e <_realloc_r+0x16>
 8005a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a88:	4611      	mov	r1, r2
 8005a8a:	f7ff bf81 	b.w	8005990 <_malloc_r>
 8005a8e:	b92a      	cbnz	r2, 8005a9c <_realloc_r+0x24>
 8005a90:	f7ff ff12 	bl	80058b8 <_free_r>
 8005a94:	4625      	mov	r5, r4
 8005a96:	4628      	mov	r0, r5
 8005a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a9c:	f000 f838 	bl	8005b10 <_malloc_usable_size_r>
 8005aa0:	4284      	cmp	r4, r0
 8005aa2:	4607      	mov	r7, r0
 8005aa4:	d802      	bhi.n	8005aac <_realloc_r+0x34>
 8005aa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005aaa:	d812      	bhi.n	8005ad2 <_realloc_r+0x5a>
 8005aac:	4621      	mov	r1, r4
 8005aae:	4640      	mov	r0, r8
 8005ab0:	f7ff ff6e 	bl	8005990 <_malloc_r>
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d0ed      	beq.n	8005a96 <_realloc_r+0x1e>
 8005aba:	42bc      	cmp	r4, r7
 8005abc:	4622      	mov	r2, r4
 8005abe:	4631      	mov	r1, r6
 8005ac0:	bf28      	it	cs
 8005ac2:	463a      	movcs	r2, r7
 8005ac4:	f7ff fed0 	bl	8005868 <memcpy>
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4640      	mov	r0, r8
 8005acc:	f7ff fef4 	bl	80058b8 <_free_r>
 8005ad0:	e7e1      	b.n	8005a96 <_realloc_r+0x1e>
 8005ad2:	4635      	mov	r5, r6
 8005ad4:	e7df      	b.n	8005a96 <_realloc_r+0x1e>
	...

08005ad8 <_sbrk_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4d06      	ldr	r5, [pc, #24]	; (8005af4 <_sbrk_r+0x1c>)
 8005adc:	2300      	movs	r3, #0
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	f7fa ffdc 	bl	8000aa0 <_sbrk>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_sbrk_r+0x1a>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_sbrk_r+0x1a>
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	24000178 	.word	0x24000178

08005af8 <__malloc_lock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__malloc_lock+0x8>)
 8005afa:	f000 b811 	b.w	8005b20 <__retarget_lock_acquire_recursive>
 8005afe:	bf00      	nop
 8005b00:	2400017c 	.word	0x2400017c

08005b04 <__malloc_unlock>:
 8005b04:	4801      	ldr	r0, [pc, #4]	; (8005b0c <__malloc_unlock+0x8>)
 8005b06:	f000 b80c 	b.w	8005b22 <__retarget_lock_release_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	2400017c 	.word	0x2400017c

08005b10 <_malloc_usable_size_r>:
 8005b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b14:	1f18      	subs	r0, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfbc      	itt	lt
 8005b1a:	580b      	ldrlt	r3, [r1, r0]
 8005b1c:	18c0      	addlt	r0, r0, r3
 8005b1e:	4770      	bx	lr

08005b20 <__retarget_lock_acquire_recursive>:
 8005b20:	4770      	bx	lr

08005b22 <__retarget_lock_release_recursive>:
 8005b22:	4770      	bx	lr

08005b24 <_init>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr

08005b30 <_fini>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr
